{
    "status": "ok",
    "feed": {
        "url": "https://medium.com/feed/elementaryos/",
        "title": "elementary OS - Medium",
        "link": "https://medium.com/elementaryos?source=rss----ef863fa48176---4",
        "author": "",
        "description": "The blog for elementary OS | https://elementary.io - Medium",
        "image": "https://cdn-images-1.medium.com/proxy/1*TGH72Nnw24QL3iV9IOm4VA.png"
    },
    "items": [
        {
            "title": "Look &amp; Feel Changes for Juno",
            "pubDate": "2018-05-31 18:05:55",
            "link": "https://medium.com/elementaryos/look-feel-changes-for-juno-2df28f220734?source=rss----ef863fa48176---4",
            "guid": "2df28f220734",
            "author": "Daniel Foré",
            "thumbnail": "https://cdn-images-1.medium.com/max/742/1*hoTB3GjrZSko6jyBKgOkwA@2x.png",
            "description": "\n<p>While we’re scrambling to put the finishing touches on the impending Juno Public Beta, for this month’s progress post I’d like to talk a bit about some of the look and feel changes you can expect in elementary OS 5.</p>\n<h3>Expanded &amp; Refined Color Palette</h3>\n<p>One of the largest foundational changes we made this cycle was to dial in our <a href=\"https://elementary.io/docs/human-interface-guidelines#color\">official color palette</a> and expand it to include 5 shades per color.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/742/1*hoTB3GjrZSko6jyBKgOkwA@2x.png\"></figure><p>This new expanded palette means greater consistently between our iconography and our stylesheet and gives our third-party app developer community a much better framework for making their apps feel native to elementary OS.</p>\n<p>As of Juno, the elementary palette will be pre-installed by default as a .gpl file and ready to use in Inkscape and GIMP. We’re also adding color variables to our stylesheet so that you can use constants like @LIME_500 or @GRAPE_700 in your app’s custom styling.</p>\n<h3>Icon Changes</h3>\n<p>There has been an incredible amount of work done on icons this cycle. So far we’ve already changed over 850 icon files. This includes redesigns, new icons, updating icons to take advantage of the new palette and hinting icons to more sizes.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/960/1*WJlsHEu1AltXpOuDsQdpKg.png\"><figcaption>The new palette really shines in green icons like the epub file icon</figcaption></figure><p>File type icons have especially seen some big changes recently. You can see that we’ve gone from a variety of styles with inconsistent colors to a more unified look with symbols that scale better to small sizes.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/474/1*zslqGz3bZx6IbCOKfKpz3A.png\"><figcaption>New development-related file type icons</figcaption></figure><p>We’ve also introduced some new, development-related file type icons for things like translation files and programming languages.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/557/1*4LB_WUDX9QfL4cBYG01Mwg@2x.png\"><figcaption>Many icons are now fully-hinted in 6 sizes</figcaption></figure><p>There’s been a lot of work on increasing the consistency between icons at their various sizes and many icons are now fully-hinted in 6 sizes.</p>\n<p>Updating all of these icons and filling in the gaps has been a huge effort and I’d like to give special thanks to <a href=\"https://micahilbery.com/\">Micah Ilbery</a>, <a href=\"https://samuelhewitt.com/\">Sam Hewitt</a>, <a href=\"https://github.com/ochosi\">Simon Steinbeiß</a>, and <a href=\"https://github.com/elementary/icons/graphs/contributors\">many others</a> for all of their hard work.</p>\n<p>You can see the full diff of icon changes <a href=\"https://github.com/elementary/icons/compare/4.3.1...master\">here on GitHub</a>.</p>\n<h3>Stylesheet Changes</h3>\n<p>This cycle we made the massive leap from Gtk+ 3.18 to Gtk+ 3.22. For those not aware, this entailed what was nearly a full rewrite of the stylesheet. So a lot of work this cycle has gone into making sure that things look at least as good as they did in the previous release. However, we have taken time to put in a number of improvements.</p>\n<p>One thing many users were asking us for was higher contrast. We’ve heard your feedback and you’ll see darker text and icons as well as more subtle gradients throughout the UI in the new version of elementary OS.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/857/1*pA4W7uhXOteJSNlHKBqpoQ@2x.png\"></figure><p>We’re always looking to add new features for developers so we’ve added a few new style classes: .terminal, .accent, and .mode-switch. The terminal class can be used for monospace terminal-like output, i.e. for logs in a developer-oriented app. The accent class allows you to easily and quickly color labels or images with your app’s accent color. The mode switch class reduces the size of the switch to match 16px icons, and removes the accent color highlight when the switch is toggled—this is great for when your switch reflects a change between two equal states (like light and dark mode) instead of enabling or disabling a feature. All of these new style classes will be available as <a href=\"https://valadoc.org/granite/Granite.html\">Granite style class constants</a>.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/197/1*ArKxl8Dxv2_OcbQLTCyOOA@2x.png\"></figure><p>Speaking of accent colors, checkboxes and radio buttons are now drawn with CSS instead of images, so they’ll respect your apps’ accent color as well. This lets app developers weave a more consistent look and feel through their app without having to design completely custom widgets or assets.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/290/1*pdWSTKH9duSt9xqEGScs-g@2x.png\"><figcaption>Colored scales are now easier to style</figcaption></figure><p>We’ve also made it easier to add a colored background to scales, as seen in the new Night Light feature. You can now simply apply a gradient to the trough element like so:</p>\n<a href=\"https://medium.com/media/aeb3b0d1878b5903f04f153948255380/href\">https://medium.com/media/aeb3b0d1878b5903f04f153948255380/href</a><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/542/1*KkVT8Mlj4fOER96N5_cvbA@2x.png\"></figure><p>Another minor change is that Gtk.InfoBars now include an icon that reflects their message type. We hope this change makes these messages more accessible for our users with color blindness.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/286/1*R-prGxcFL00gctxmYgMqOg@2x.png\"></figure><p>We’ve also spent a lot of time on the dark style, fixing a number of issues reported and improving contrast. For example, you might notice that Scale widgets in particular are much more contrast-y and easier to see.</p>\n<p>You can see the full <a href=\"https://github.com/elementary/stylesheet/compare/5696951d8ec9dde2d4cfd9f964d8daf3dd391967...master\">list of commits and a diff on GitHub</a>.</p>\n<h3>Wallpapers</h3>\n<p>Of course our selection of default wallpapers has also been updated with a few new backgrounds we think you’re really going to enjoy. Special thanks to <a href=\"https://unsplash.com/\">Unsplash</a> and the photographers who upload their photos there!</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*hVlAQApqH9zn6fB1LCxMKQ.jpeg\"></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*mCgMNJcFwaVNKbaAW0gPvA.jpeg\"></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*veyhZ3Uvmll_yheOiFVbrQ.jpeg\"></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*Ysv5Uqndvb5iovHUaM9Cwg.jpeg\"></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*ATrYnQ19FOA1Lcc2FSSBjA.jpeg\"></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*LjHTYMbr_p3fOsUNa38QqA.jpeg\"><figcaption>A few new wallpapers coming to Juno</figcaption></figure><h3>And Many Other Changes</h3>\n<p>This month we spent a lot of time on under-the-hood changes and optimizations as well as bug fixing, API fiddling, and performance tuning. We hope you enjoyed some pretty pictures while we take care of the boring stuff! We’re now up to over <a href=\"https://github.com/search?q=org:elementary+is:closed+is:issue+milestone:%22juno-beta1%22\">650 closed issues</a> associated with the Juno Beta milestone.</p>\n<p>Juno is still under active development and we’re expecting to land even more fixes and optimizations before its big debut. Stay tuned to this blog for more highlights and announcements as we move toward the next major version of elementary OS. If you missed them, be sure to check out our previous posts about Juno:</p>\n<ul>\n<li><a href=\"https://medium.com/elementaryos/juno-progress-for-april-91babaf6ee92\">Juno Progress for April</a></li>\n<li><a href=\"https://medium.com/elementaryos/building-the-next-generation-of-apps-81234cc21a8a\">Building The Next Generation of Apps</a></li>\n<li><a href=\"https://medium.com/elementaryos/juno-progress-for-march-6fd2d553c237\">Juno Progress for March</a></li>\n<li><a href=\"https://medium.com/elementaryos/juno-progress-for-january-february-9b276042716e\">Juno Progress for January &amp; February</a></li>\n<li><a href=\"https://medium.com/elementaryos/lets-talk-about-elementary-os-5-0-juno-a3a65b97ee7e\">Let’s Talk About elementary OS 5.0 Juno</a></li>\n</ul>\n<p><em>Thank you to everyone who’s bought an app on AppCenter, our supporters on </em><a href=\"https://salt.bountysource.com/teams/elementary\"><em>Bountysource</em></a><em> and</em><a href=\"https://www.patreon.com/elementary\"><em> Patreon</em></a><em>, and those who’ve purchased a copy of </em><a href=\"https://elementary.io/\"><em>elementary OS</em></a><em> or merch from </em><a href=\"https://elementary.io/store/\"><em>our store</em></a><em>. Every contribution helps make all of this possible, and we wouldn’t be here without you! If you’d like to help improve elementary OS, don’t hesitate to </em><a href=\"https://elementary.io/get-involved\"><em>Get Involved</em></a><em>!</em></p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=2df28f220734\" width=\"1\" height=\"1\"><hr>\n<p><a href=\"https://medium.com/elementaryos/look-feel-changes-for-juno-2df28f220734\">Look &amp; Feel Changes for Juno</a> was originally published in <a href=\"https://medium.com/elementaryos\">elementary OS</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>\n",
            "content": "\n<p>While we’re scrambling to put the finishing touches on the impending Juno Public Beta, for this month’s progress post I’d like to talk a bit about some of the look and feel changes you can expect in elementary OS 5.</p>\n<h3>Expanded &amp; Refined Color Palette</h3>\n<p>One of the largest foundational changes we made this cycle was to dial in our <a href=\"https://elementary.io/docs/human-interface-guidelines#color\">official color palette</a> and expand it to include 5 shades per color.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/742/1*hoTB3GjrZSko6jyBKgOkwA@2x.png\"></figure><p>This new expanded palette means greater consistently between our iconography and our stylesheet and gives our third-party app developer community a much better framework for making their apps feel native to elementary OS.</p>\n<p>As of Juno, the elementary palette will be pre-installed by default as a .gpl file and ready to use in Inkscape and GIMP. We’re also adding color variables to our stylesheet so that you can use constants like @LIME_500 or @GRAPE_700 in your app’s custom styling.</p>\n<h3>Icon Changes</h3>\n<p>There has been an incredible amount of work done on icons this cycle. So far we’ve already changed over 850 icon files. This includes redesigns, new icons, updating icons to take advantage of the new palette and hinting icons to more sizes.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/960/1*WJlsHEu1AltXpOuDsQdpKg.png\"><figcaption>The new palette really shines in green icons like the epub file icon</figcaption></figure><p>File type icons have especially seen some big changes recently. You can see that we’ve gone from a variety of styles with inconsistent colors to a more unified look with symbols that scale better to small sizes.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/474/1*zslqGz3bZx6IbCOKfKpz3A.png\"><figcaption>New development-related file type icons</figcaption></figure><p>We’ve also introduced some new, development-related file type icons for things like translation files and programming languages.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/557/1*4LB_WUDX9QfL4cBYG01Mwg@2x.png\"><figcaption>Many icons are now fully-hinted in 6 sizes</figcaption></figure><p>There’s been a lot of work on increasing the consistency between icons at their various sizes and many icons are now fully-hinted in 6 sizes.</p>\n<p>Updating all of these icons and filling in the gaps has been a huge effort and I’d like to give special thanks to <a href=\"https://micahilbery.com/\">Micah Ilbery</a>, <a href=\"https://samuelhewitt.com/\">Sam Hewitt</a>, <a href=\"https://github.com/ochosi\">Simon Steinbeiß</a>, and <a href=\"https://github.com/elementary/icons/graphs/contributors\">many others</a> for all of their hard work.</p>\n<p>You can see the full diff of icon changes <a href=\"https://github.com/elementary/icons/compare/4.3.1...master\">here on GitHub</a>.</p>\n<h3>Stylesheet Changes</h3>\n<p>This cycle we made the massive leap from Gtk+ 3.18 to Gtk+ 3.22. For those not aware, this entailed what was nearly a full rewrite of the stylesheet. So a lot of work this cycle has gone into making sure that things look at least as good as they did in the previous release. However, we have taken time to put in a number of improvements.</p>\n<p>One thing many users were asking us for was higher contrast. We’ve heard your feedback and you’ll see darker text and icons as well as more subtle gradients throughout the UI in the new version of elementary OS.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/857/1*pA4W7uhXOteJSNlHKBqpoQ@2x.png\"></figure><p>We’re always looking to add new features for developers so we’ve added a few new style classes: .terminal, .accent, and .mode-switch. The terminal class can be used for monospace terminal-like output, i.e. for logs in a developer-oriented app. The accent class allows you to easily and quickly color labels or images with your app’s accent color. The mode switch class reduces the size of the switch to match 16px icons, and removes the accent color highlight when the switch is toggled—this is great for when your switch reflects a change between two equal states (like light and dark mode) instead of enabling or disabling a feature. All of these new style classes will be available as <a href=\"https://valadoc.org/granite/Granite.html\">Granite style class constants</a>.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/197/1*ArKxl8Dxv2_OcbQLTCyOOA@2x.png\"></figure><p>Speaking of accent colors, checkboxes and radio buttons are now drawn with CSS instead of images, so they’ll respect your apps’ accent color as well. This lets app developers weave a more consistent look and feel through their app without having to design completely custom widgets or assets.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/290/1*pdWSTKH9duSt9xqEGScs-g@2x.png\"><figcaption>Colored scales are now easier to style</figcaption></figure><p>We’ve also made it easier to add a colored background to scales, as seen in the new Night Light feature. You can now simply apply a gradient to the trough element like so:</p>\n<a href=\"https://medium.com/media/aeb3b0d1878b5903f04f153948255380/href\">https://medium.com/media/aeb3b0d1878b5903f04f153948255380/href</a><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/542/1*KkVT8Mlj4fOER96N5_cvbA@2x.png\"></figure><p>Another minor change is that Gtk.InfoBars now include an icon that reflects their message type. We hope this change makes these messages more accessible for our users with color blindness.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/286/1*R-prGxcFL00gctxmYgMqOg@2x.png\"></figure><p>We’ve also spent a lot of time on the dark style, fixing a number of issues reported and improving contrast. For example, you might notice that Scale widgets in particular are much more contrast-y and easier to see.</p>\n<p>You can see the full <a href=\"https://github.com/elementary/stylesheet/compare/5696951d8ec9dde2d4cfd9f964d8daf3dd391967...master\">list of commits and a diff on GitHub</a>.</p>\n<h3>Wallpapers</h3>\n<p>Of course our selection of default wallpapers has also been updated with a few new backgrounds we think you’re really going to enjoy. Special thanks to <a href=\"https://unsplash.com/\">Unsplash</a> and the photographers who upload their photos there!</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*hVlAQApqH9zn6fB1LCxMKQ.jpeg\"></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*mCgMNJcFwaVNKbaAW0gPvA.jpeg\"></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*veyhZ3Uvmll_yheOiFVbrQ.jpeg\"></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*Ysv5Uqndvb5iovHUaM9Cwg.jpeg\"></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*ATrYnQ19FOA1Lcc2FSSBjA.jpeg\"></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*LjHTYMbr_p3fOsUNa38QqA.jpeg\"><figcaption>A few new wallpapers coming to Juno</figcaption></figure><h3>And Many Other Changes</h3>\n<p>This month we spent a lot of time on under-the-hood changes and optimizations as well as bug fixing, API fiddling, and performance tuning. We hope you enjoyed some pretty pictures while we take care of the boring stuff! We’re now up to over <a href=\"https://github.com/search?q=org:elementary+is:closed+is:issue+milestone:%22juno-beta1%22\">650 closed issues</a> associated with the Juno Beta milestone.</p>\n<p>Juno is still under active development and we’re expecting to land even more fixes and optimizations before its big debut. Stay tuned to this blog for more highlights and announcements as we move toward the next major version of elementary OS. If you missed them, be sure to check out our previous posts about Juno:</p>\n<ul>\n<li><a href=\"https://medium.com/elementaryos/juno-progress-for-april-91babaf6ee92\">Juno Progress for April</a></li>\n<li><a href=\"https://medium.com/elementaryos/building-the-next-generation-of-apps-81234cc21a8a\">Building The Next Generation of Apps</a></li>\n<li><a href=\"https://medium.com/elementaryos/juno-progress-for-march-6fd2d553c237\">Juno Progress for March</a></li>\n<li><a href=\"https://medium.com/elementaryos/juno-progress-for-january-february-9b276042716e\">Juno Progress for January &amp; February</a></li>\n<li><a href=\"https://medium.com/elementaryos/lets-talk-about-elementary-os-5-0-juno-a3a65b97ee7e\">Let’s Talk About elementary OS 5.0 Juno</a></li>\n</ul>\n<p><em>Thank you to everyone who’s bought an app on AppCenter, our supporters on </em><a href=\"https://salt.bountysource.com/teams/elementary\"><em>Bountysource</em></a><em> and</em><a href=\"https://www.patreon.com/elementary\"><em> Patreon</em></a><em>, and those who’ve purchased a copy of </em><a href=\"https://elementary.io/\"><em>elementary OS</em></a><em> or merch from </em><a href=\"https://elementary.io/store/\"><em>our store</em></a><em>. Every contribution helps make all of this possible, and we wouldn’t be here without you! If you’d like to help improve elementary OS, don’t hesitate to </em><a href=\"https://elementary.io/get-involved\"><em>Get Involved</em></a><em>!</em></p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=2df28f220734\" width=\"1\" height=\"1\"><hr>\n<p><a href=\"https://medium.com/elementaryos/look-feel-changes-for-juno-2df28f220734\">Look &amp; Feel Changes for Juno</a> was originally published in <a href=\"https://medium.com/elementaryos\">elementary OS</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>\n",
            "enclosure": {},
            "categories": [
                "elementary-os",
                "icons",
                "design",
                "open-source"
            ]
        },
        {
            "title": "AppCenter Spotlight: Transporter",
            "pubDate": "2018-05-16 13:59:44",
            "link": "https://medium.com/elementaryos/appcenter-spotlight-transporter-7c9db2472f37?source=rss----ef863fa48176---4",
            "guid": "7c9db2472f37",
            "author": "Cassidy James Blaede",
            "thumbnail": "https://cdn-images-1.medium.com/max/164/1*nj0SqX8s3nICqGmfKcT6vg@2x.png",
            "description": "\n<h4>Hassle-free file sharing</h4>\n<figure><a href=\"https://appcenter.elementary.io/com.github.bleakgrey.transporter.desktop\"><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/164/1*nj0SqX8s3nICqGmfKcT6vg@2x.png\"></a><figcaption>On elementary OS? Hit the button to get Transporter.</figcaption></figure><p>Transporter by Bleak Grey is pure magic. Based on a technology called Magic Wormhole (yes, <a href=\"https://github.com/warner/magic-wormhole#magic-wormhole\">really</a>), it makes sharing a file across the room or <em>across the globe </em>stupid easy. This is seriously my new favorite app.</p>\n<h3>Meet Bleak Grey</h3>\n<p>Before we dive into Transporter, let’s meet Bleak Grey and hear his development story.</p>\n<p>While Bleak Grey’s not his real name—he wishes to remain anonymous—Bleak <em>is</em> willing to share a little about himself and his interests: he’s a linguistics student who dabbles in photography, drawing, and learning German. He also aspires to learn to play the violin, and ponders about releasing a game some day (please, I’d love to see more games in AppCenter!).</p>\n<p>Bleak started developing apps for elementary OS due to his drive of trying new things, and his falling in love with the community.</p>\n<blockquote>One day I found out about elementary OS. It was beautiful, fast, and easy to use, so I decided to install it on my laptop. In fact, I liked it so much I wanted to be a part of this community. When I realized AppCenter could use some native apps from developers, I decided to write an app.</blockquote>\n<p>So he did.</p>\n<h3>Getting into Development</h3>\n<p>He had never developed for Linux before, so he was truly trying something new! He followed the <a href=\"https://elementary.io/docs/code/getting-started\">elementary Developer Guide,</a> Googled for help, and spent the next couple of weeks building Transporter.</p>\n<blockquote>There were some ups and downs (I mean <a href=\"https://github.com/bleakgrey/Transporter/commit/3b7d960153bdb33aebccdc78ddd5ab053c6908b8\">the “aaaaagh” commits</a>), but I think it’s relatable to the programming as a whole. I feel like the entire experience with elementary was so enjoyable it makes me want more.</blockquote>\n<p>He spent the next week getting it packaged up, built, and tested in AppCenter Dashboard. After figuring out the Debian packaging, it was smooth sailing.</p>\n<blockquote>The publishing process is smooth and really simple. You connect your GitHub account, release a version and submit it to AppCenter. Honestly, I was shocked at how easy it was. The time gap between writing and publishing Transporter was so short it’s amazing.</blockquote>\n<h3>The Result: Transporter</h3>\n<p>So how did Bleak do? Like I mentioned at the start, really well: this is my new favorite app! Let’s take a closer look.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/558/0*myyKEqITLTW1Y2JC.png\"></figure><p>When you pop Transporter open, you’re greeted with a familiar welcome screen (like the ones you may have seen in stock elementary OS apps like Music, Videos, Scratch/Code, etc.). You can do three things: Send files, receive files, or show your downloads folder.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/558/0*gfFHs-pDJ9znG8IS.png\"></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/580/1*naiYQjZTUN1fQVXCSHspsw.png\"><figcaption>Sending files: dead simple</figcaption></figure><p>Opting to send files shows you a nice big drop target for files. If you drop a single file, it’ll send directly. Otherwise, it’ll zip the files or folder you share up so it’s still just one transfer.</p>\n<p>Once you drop some files, you’re given a “transfer ID.” This ID comes from that Magic Wormhole backend, and is a combination of a number and a few words. The idea: you can easily remember this combination or speak it out loud across the room or over a call, then the recipient can punch it in to start a peer-to-peer, end-to-end encrypted transfer. You can read more about the backend and concept over at <a href=\"https://magic-wormhole.readthedocs.io/en/latest/welcome.html#motivation\">the Magic Wormhole site</a>—I recommend you do, as it’s some fascinating work.</p>\n<p>The ID is only usable as long as your Transporter window is open and someone hasn’t downloaded the file: as soon as it’s closed or used, it’s invalidated. This means there’s little risk for anyone but the intended recipient getting the file, since it’s one-time use and only open for a short time. Plus, with tons of possible number and word combinations, guessing an ID while it’s briefly open is nearly impossible.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/558/0*qvN09pFysPwBN0fk.png\"><figcaption>Receiving files: just as simple!</figcaption></figure><p>On the other end, receiving files is just as simple as you’d expect. You punch in the sender’s transfer ID, hit Enter, and start transferring the file. Boom, easy.</p>\n<p>I’ve started using this for my own file transfers at home and work since it’s so simple, and I highly recommend anyone on elementary OS to grab it! It has come in handy to transfer a large file when a flash drive wasn’t handy, to transfer a small file from home to work, and to send goofy demo pics back and forth with friends.</p>\n<p>I’m even considering doing some goofy first-come-first-served social media promotions with it, since the one-time-use aspect could lead to some competition… so stay tuned for that. But regardless, it’s a super useful app built on a really interesting backend. I recommend you download it and give it a try!</p>\n<h3>Get It</h3>\n<p>Transporter is <a href=\"https://appcenter.elementary.io/com.github.bleakgrey.transporter.desktop\">available on AppCenter</a> today <strong>for free.</strong> Its source code is also openly-licensed and <a href=\"https://github.com/bleakgrey/transporter/\">available on GitHub</a>.</p>\n<figure><a href=\"https://appcenter.elementary.io/com.github.bleakgrey.transporter.desktop\"><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/164/1*nj0SqX8s3nICqGmfKcT6vg@2x.png\"></a><figcaption>On elementary OS? Hit the button to get Transporter.</figcaption></figure><p>Bleak also encourages people who want to help out to get involved! Issues, ideas, feature requests, and pull requests are all welcome. Check the details on <a href=\"https://github.com/bleakgrey/transporter/#contributing\">GitHub</a>.</p>\n<h3>The Future</h3>\n<p>Bleak considers Transporter more or less functionally complete, but he’s not done developing for AppCenter.</p>\n<blockquote>I’m pretty proud for this app, since it’s my first one ever written for Linux. It was an interesting experience and I loved it. But I don’t think it was enough for me. That’s why I’m writing another one, <a href=\"https://github.com/bleakgrey/tootle\">a Mastodon client for elementary OS</a>.</blockquote>\n<p>I’m unreasonably excited about this, as I’ve started using the indie open source social network Mastodon more day-to-day, and an indie open source client on the indie open source app store just seems… right. Plus it’s called Tootle. What’s not to love?</p>\n<p>Be sure to follow along with development and musings by following Bleak Grey on <a href=\"https://github.com/bleakgrey\">GitHub</a>, <a href=\"https://twitter.com/bleak_grey\">Twitter</a>, and of course, <a href=\"https://mastodon.social/@bleakgrey\">Mastodon</a>.</p>\n<p>As for parting words, Bleak had this to say:</p>\n<blockquote>Starting small and celebrating the little things can be both enjoyable and beneficial for community.</blockquote>\n<p><em>Thank you to all of the app developers like Bleak Grey out there, everyone who’s bought an app on AppCenter, our supporters on </em><a href=\"https://salt.bountysource.com/teams/elementary\"><em>Bountysource</em></a><em> and</em><a href=\"https://www.patreon.com/elementary\"><em> Patreon</em></a><em>, and those who’ve purchased a copy of </em><a href=\"https://elementary.io/\"><em>elementary OS</em></a><em> or merch from </em><a href=\"https://elementary.io/store/\"><em>our store</em></a><em>. Each of these contributions helps make this all possible, and we wouldn’t be here without you.</em></p>\n<p><em>As always, if you’d like to help improve elementary OS, don’t hesitate to </em><a href=\"https://elementary.io/get-involved\"><em>Get Involved</em></a><em>!</em></p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=7c9db2472f37\" width=\"1\" height=\"1\"><hr>\n<p><a href=\"https://medium.com/elementaryos/appcenter-spotlight-transporter-7c9db2472f37\">AppCenter Spotlight: Transporter</a> was originally published in <a href=\"https://medium.com/elementaryos\">elementary OS</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>\n",
            "content": "\n<h4>Hassle-free file sharing</h4>\n<figure><a href=\"https://appcenter.elementary.io/com.github.bleakgrey.transporter.desktop\"><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/164/1*nj0SqX8s3nICqGmfKcT6vg@2x.png\"></a><figcaption>On elementary OS? Hit the button to get Transporter.</figcaption></figure><p>Transporter by Bleak Grey is pure magic. Based on a technology called Magic Wormhole (yes, <a href=\"https://github.com/warner/magic-wormhole#magic-wormhole\">really</a>), it makes sharing a file across the room or <em>across the globe </em>stupid easy. This is seriously my new favorite app.</p>\n<h3>Meet Bleak Grey</h3>\n<p>Before we dive into Transporter, let’s meet Bleak Grey and hear his development story.</p>\n<p>While Bleak Grey’s not his real name—he wishes to remain anonymous—Bleak <em>is</em> willing to share a little about himself and his interests: he’s a linguistics student who dabbles in photography, drawing, and learning German. He also aspires to learn to play the violin, and ponders about releasing a game some day (please, I’d love to see more games in AppCenter!).</p>\n<p>Bleak started developing apps for elementary OS due to his drive of trying new things, and his falling in love with the community.</p>\n<blockquote>One day I found out about elementary OS. It was beautiful, fast, and easy to use, so I decided to install it on my laptop. In fact, I liked it so much I wanted to be a part of this community. When I realized AppCenter could use some native apps from developers, I decided to write an app.</blockquote>\n<p>So he did.</p>\n<h3>Getting into Development</h3>\n<p>He had never developed for Linux before, so he was truly trying something new! He followed the <a href=\"https://elementary.io/docs/code/getting-started\">elementary Developer Guide,</a> Googled for help, and spent the next couple of weeks building Transporter.</p>\n<blockquote>There were some ups and downs (I mean <a href=\"https://github.com/bleakgrey/Transporter/commit/3b7d960153bdb33aebccdc78ddd5ab053c6908b8\">the “aaaaagh” commits</a>), but I think it’s relatable to the programming as a whole. I feel like the entire experience with elementary was so enjoyable it makes me want more.</blockquote>\n<p>He spent the next week getting it packaged up, built, and tested in AppCenter Dashboard. After figuring out the Debian packaging, it was smooth sailing.</p>\n<blockquote>The publishing process is smooth and really simple. You connect your GitHub account, release a version and submit it to AppCenter. Honestly, I was shocked at how easy it was. The time gap between writing and publishing Transporter was so short it’s amazing.</blockquote>\n<h3>The Result: Transporter</h3>\n<p>So how did Bleak do? Like I mentioned at the start, really well: this is my new favorite app! Let’s take a closer look.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/558/0*myyKEqITLTW1Y2JC.png\"></figure><p>When you pop Transporter open, you’re greeted with a familiar welcome screen (like the ones you may have seen in stock elementary OS apps like Music, Videos, Scratch/Code, etc.). You can do three things: Send files, receive files, or show your downloads folder.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/558/0*gfFHs-pDJ9znG8IS.png\"></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/580/1*naiYQjZTUN1fQVXCSHspsw.png\"><figcaption>Sending files: dead simple</figcaption></figure><p>Opting to send files shows you a nice big drop target for files. If you drop a single file, it’ll send directly. Otherwise, it’ll zip the files or folder you share up so it’s still just one transfer.</p>\n<p>Once you drop some files, you’re given a “transfer ID.” This ID comes from that Magic Wormhole backend, and is a combination of a number and a few words. The idea: you can easily remember this combination or speak it out loud across the room or over a call, then the recipient can punch it in to start a peer-to-peer, end-to-end encrypted transfer. You can read more about the backend and concept over at <a href=\"https://magic-wormhole.readthedocs.io/en/latest/welcome.html#motivation\">the Magic Wormhole site</a>—I recommend you do, as it’s some fascinating work.</p>\n<p>The ID is only usable as long as your Transporter window is open and someone hasn’t downloaded the file: as soon as it’s closed or used, it’s invalidated. This means there’s little risk for anyone but the intended recipient getting the file, since it’s one-time use and only open for a short time. Plus, with tons of possible number and word combinations, guessing an ID while it’s briefly open is nearly impossible.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/558/0*qvN09pFysPwBN0fk.png\"><figcaption>Receiving files: just as simple!</figcaption></figure><p>On the other end, receiving files is just as simple as you’d expect. You punch in the sender’s transfer ID, hit Enter, and start transferring the file. Boom, easy.</p>\n<p>I’ve started using this for my own file transfers at home and work since it’s so simple, and I highly recommend anyone on elementary OS to grab it! It has come in handy to transfer a large file when a flash drive wasn’t handy, to transfer a small file from home to work, and to send goofy demo pics back and forth with friends.</p>\n<p>I’m even considering doing some goofy first-come-first-served social media promotions with it, since the one-time-use aspect could lead to some competition… so stay tuned for that. But regardless, it’s a super useful app built on a really interesting backend. I recommend you download it and give it a try!</p>\n<h3>Get It</h3>\n<p>Transporter is <a href=\"https://appcenter.elementary.io/com.github.bleakgrey.transporter.desktop\">available on AppCenter</a> today <strong>for free.</strong> Its source code is also openly-licensed and <a href=\"https://github.com/bleakgrey/transporter/\">available on GitHub</a>.</p>\n<figure><a href=\"https://appcenter.elementary.io/com.github.bleakgrey.transporter.desktop\"><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/164/1*nj0SqX8s3nICqGmfKcT6vg@2x.png\"></a><figcaption>On elementary OS? Hit the button to get Transporter.</figcaption></figure><p>Bleak also encourages people who want to help out to get involved! Issues, ideas, feature requests, and pull requests are all welcome. Check the details on <a href=\"https://github.com/bleakgrey/transporter/#contributing\">GitHub</a>.</p>\n<h3>The Future</h3>\n<p>Bleak considers Transporter more or less functionally complete, but he’s not done developing for AppCenter.</p>\n<blockquote>I’m pretty proud for this app, since it’s my first one ever written for Linux. It was an interesting experience and I loved it. But I don’t think it was enough for me. That’s why I’m writing another one, <a href=\"https://github.com/bleakgrey/tootle\">a Mastodon client for elementary OS</a>.</blockquote>\n<p>I’m unreasonably excited about this, as I’ve started using the indie open source social network Mastodon more day-to-day, and an indie open source client on the indie open source app store just seems… right. Plus it’s called Tootle. What’s not to love?</p>\n<p>Be sure to follow along with development and musings by following Bleak Grey on <a href=\"https://github.com/bleakgrey\">GitHub</a>, <a href=\"https://twitter.com/bleak_grey\">Twitter</a>, and of course, <a href=\"https://mastodon.social/@bleakgrey\">Mastodon</a>.</p>\n<p>As for parting words, Bleak had this to say:</p>\n<blockquote>Starting small and celebrating the little things can be both enjoyable and beneficial for community.</blockquote>\n<p><em>Thank you to all of the app developers like Bleak Grey out there, everyone who’s bought an app on AppCenter, our supporters on </em><a href=\"https://salt.bountysource.com/teams/elementary\"><em>Bountysource</em></a><em> and</em><a href=\"https://www.patreon.com/elementary\"><em> Patreon</em></a><em>, and those who’ve purchased a copy of </em><a href=\"https://elementary.io/\"><em>elementary OS</em></a><em> or merch from </em><a href=\"https://elementary.io/store/\"><em>our store</em></a><em>. Each of these contributions helps make this all possible, and we wouldn’t be here without you.</em></p>\n<p><em>As always, if you’d like to help improve elementary OS, don’t hesitate to </em><a href=\"https://elementary.io/get-involved\"><em>Get Involved</em></a><em>!</em></p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=7c9db2472f37\" width=\"1\" height=\"1\"><hr>\n<p><a href=\"https://medium.com/elementaryos/appcenter-spotlight-transporter-7c9db2472f37\">AppCenter Spotlight: Transporter</a> was originally published in <a href=\"https://medium.com/elementaryos\">elementary OS</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>\n",
            "enclosure": {},
            "categories": [
                "magic-wormhole",
                "elementary-os",
                "file-transfer",
                "appcenter-spotlight",
                "open-source"
            ]
        },
        {
            "title": "Juno Progress for April",
            "pubDate": "2018-04-30 22:37:58",
            "link": "https://medium.com/elementaryos/juno-progress-for-april-91babaf6ee92?source=rss----ef863fa48176---4",
            "guid": "91babaf6ee92",
            "author": "Daniel Foré",
            "thumbnail": "https://cdn-images-1.medium.com/max/1024/1*SU7X1RKtzZeh_j1d87EAOw@2x.png",
            "description": "\n<h4>Get hyped! Juno is coming!</h4>\n<p>With only a handful of issues left before we’re ready for public beta, I present to you our progress for the month of April! At this point, the vast majority of new features have landed in Juno and we’re focusing on bug fixing, polish, and general quality control and testing. Get hyped because we’re almost there!</p>\n<h3>Notifications</h3>\n<p>As part of our effort to make sure users have full control over apps that send notifications and how those are displayed, we’ve opted to make some changes to the way the Notifications indicator works. Right now, developers can identify their apps to the notifications server using <a href=\"https://elementary.io/docs/code/getting-started#notifications\">GLib.Notification</a>. However, we previously also had a heuristic that tried to guess the correct app for notifications that didn’t include an ID. This often resulted in notifications being grouped incorrectly, especially with Electron-based notifications. In order to fix this, we’ve done two things:</p>\n<ol>\n<li>We’ve removed the heuristic that tries to guess which app a notification was sent from. All notifications sent without an ID will be categorized as “Other” from now on.</li>\n<li>We’ve submitted patches upstream to <a href=\"https://github.com/electron/electron/pull/11913#issuecomment-365423133\">Electron</a>, <a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=1438051\">Firefox</a>, and <a href=\"https://bugzilla.gnome.org/show_bug.cgi?id=793474\">LibNotify</a> to help developers identify their apps properly to the notifications server. This should benefit not just elementary OS but also GNOME and other Open Source desktops. We’re happy to say that the Electron patch <a href=\"https://github.com/electron/electron/blob/master/brightray/browser/linux/libnotify_notification.cc#L127\">was committed</a> and we hope to see Electron apps identifying themselves correctly soon.</li>\n</ol>\n<p>We’ve made one more change that we’re interested in getting feedback on: By default, we’ve disabled notifications from “Other” apps. This means that apps that don’t correctly identify themselves to the notification server, and thus can’t be individually controlled, won’t be able to send notifications at all out of the box. You can always re-enable notifications for “Other” apps in System Settings → Notifications, but we’d encourage you to put pressure on the developers of your favorite apps to make sure they’re sending their app ID to the notifications server.</p>\n<h3>Files</h3>\n<p>As one of our most mature apps, Files predates our standardization on Vala as a programming language. It was historically written in C and still carries many C classes. I’m excited to say that a lot of hard work has gone into porting many of these old C classes to new, shiny Vala classes that are many hundreds of lines shorter. This means a much cleaner and more maintainable code base and has already led to a number of stability and performance improvements. We’ve also been able to drop several internal functions and instead use the functions of upstream libraries like Gtk+, GIO, etc.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*SU7X1RKtzZeh_j1d87EAOw@2x.png\"><figcaption>Oh yeah and also Files now fully supports HiDPI</figcaption></figure><p>As a bit of a cherry on top, Files now fully supports HiDPI and renders the icons and thumbnails in its views in crystal clarity.</p>\n<h3>System Settings</h3>\n<p>As part of our effort to make absolutely everything in elementary OS better, we’ve spent a lot of time in System Settings this cycle. This month, Printers got a lot of special attention and a significant redesign.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*N4FdB-U5T3PAlJqXl8SOxA@2x.png\"><figcaption>Printer settings has received a decent amount of design attention</figcaption></figure><p>Navigation between different types of settings is much clearer since moving the contents of the menu in the header to a dedicated tab. The “Print Test Page” button is now always visible in an obvious bottom-right position. Completed jobs are now always shown in the Print Queue and sorted separately from pending jobs regardless of their start time. We also make use of the <a href=\"https://valadoc.org/granite/Granite.DateTime.get_relative_datetime.html\">RelativeDateTime</a> utility in Granite to give you more human-readable times like “5m ago” or “Yesterday”. Last, but not least, the popovers for adding and removing printers are now dialogs and have simpler and clearer navigation as well.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1006/1*L8AHf304Qa-Fc9q1PSG_-w@2x.png\"><figcaption>Language &amp; Region settings got a slight design update; plus, infobars now have icons</figcaption></figure><p>Language &amp; Region settings saw a bit of a design update as it was ported to the new Granite SimpleSettingsPage. The link to Keyboard Settings is now a more-obvious labeled button and actions for the selected language now float to the bottom right of the window. The label for the currently selected language now also uses a larger font and is accompanied by the locale settings icon. This brings things more in line with many other settings pages you’ll see. You might also notice that InfoBars now come with a little icon on the left side that relates to their message type.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/537/1*v2AgWi18Zo-AWLZwy1cz6Q@2x.png\"></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/537/1*wjC2umnQzXkRF4E784qIvQ@2x.png\"><figcaption>New Report a Problem dialog in System Settings → About</figcaption></figure><p>If you weren’t already aware, you can find a link to report a problem with elementary OS in System Settings → About. Now, instead of going to a web page on Launchpad to select a component to file an issue against, we provide a dialog with categories and icons to help you filter down and find the correct GitHub repository to file an issue against.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1006/1*bVy0uG_BuJLmh39Ck6i0nA@2x.png\"><figcaption>You can now manually set your display’s scaling factor in System Settings → Displays</figcaption></figure><p>Two more small features landed in System Settings this month as well: you can now delete wallpapers from System Settings → Desktop → Wallpaper with a convenient secondary click menu and you can manually set your display’s scaling factor in System Settings → Displays.</p>\n<h3>Code</h3>\n<p>We spent some more time this month improving <a href=\"https://medium.com/elementaryos/scratch-is-now-code-2838e03134c7\">Code</a> to make it even better as your daily code editor.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*PEpq4xBKkJUKt1r6QZh2OQ@2x.png\"></figure><p>Code now comes with new smart backspace and home key behaviors, meaning it more often does what you’d expect when you hit those keys and cuts down on repeat presses. It also now accepts colons in addition to periods in the Line Number entry, meaning you can hit “123:45” to jump to the 45th character on line 123. We’ve added an “Open Folder” item on the welcome screen, making it that much faster and obvious to get started from a blank slate. And as a nice little touch, we added a little animation to the sidebar when switching between your project folders and symbols.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/201/1*NXwxa4BMhRCrOcwoB0VWXw@2x.png\"><figcaption>Cute rendition of our icon by EditorConfig’s <a href=\"https://github.com/editorconfig/editorconfig.github.com/pull/88\">Amon Keishima</a></figcaption></figure><p>And lastly, while <a href=\"https://medium.com/elementaryos/juno-progress-for-march-6fd2d553c237\">last month</a> we added EditorConfig support to Code, this month we turned it on by default, and Code was added to the front page of <a href=\"http://editorconfig.org/#download\">EditorConfig.org</a>!</p>\n<h3>And More</h3>\n<p>Many first party apps are now testing with <a href=\"https://medium.com/elementaryos/introducing-houston-ci-3179ec34e726\">Houston CI</a>, meeting the same strict publishing standards that we use for 3rd party apps in AppCenter. Plus, we’ve been working on a set of performance improvements for the panel that should make the desktop load more smoothly for users with slow, spinning hard disks.</p>\n<p>In additional to all of the above, you can always count on a healthy dose of code cleaning and general bug fixing. We’re now up to over <a href=\"https://github.com/search?q=org:elementary+is:closed+is:issue+milestone:%22juno-beta1%22\">490 closed issues</a> associated with the Juno Beta milestone.</p>\n<p>Juno is still under active development and we’re expecting to land even more fixes and optimizations before its big debut. Stay tuned to this blog for more highlights and announcements as we move toward the next major version of elementary OS. If you missed them, be sure to check out our previous posts about Juno:</p>\n<ul>\n<li><a href=\"https://medium.com/elementaryos/building-the-next-generation-of-apps-81234cc21a8a\">Building The Next Generation of Apps</a></li>\n<li><a href=\"https://medium.com/elementaryos/juno-progress-for-march-6fd2d553c237\">Juno Progress for March</a></li>\n<li><a href=\"https://medium.com/elementaryos/juno-progress-for-january-february-9b276042716e\">Juno Progress for January &amp; February</a></li>\n<li><a href=\"https://medium.com/elementaryos/lets-talk-about-elementary-os-5-0-juno-a3a65b97ee7e\">Let’s Talk About elementary OS 5.0 Juno</a></li>\n</ul>\n<p><em>Thank you to everyone who’s bought an app on AppCenter, our supporters on </em><a href=\"https://salt.bountysource.com/teams/elementary\"><em>Bountysource</em></a><em> and</em><a href=\"https://www.patreon.com/elementary\"><em> Patreon</em></a><em>, and those who’ve purchased a copy of </em><a href=\"https://elementary.io/\"><em>elementary OS</em></a><em> or merch from </em><a href=\"https://elementary.io/store/\"><em>our store</em></a><em>. Every contribution helps make all of this possible, and we wouldn’t be here without you! If you’d like to help improve elementary OS, don’t hesitate to </em><a href=\"https://elementary.io/get-involved\"><em>Get Involved</em></a><em>!</em></p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=91babaf6ee92\" width=\"1\" height=\"1\"><hr>\n<p><a href=\"https://medium.com/elementaryos/juno-progress-for-april-91babaf6ee92\">Juno Progress for April</a> was originally published in <a href=\"https://medium.com/elementaryos\">elementary OS</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>\n",
            "content": "\n<h4>Get hyped! Juno is coming!</h4>\n<p>With only a handful of issues left before we’re ready for public beta, I present to you our progress for the month of April! At this point, the vast majority of new features have landed in Juno and we’re focusing on bug fixing, polish, and general quality control and testing. Get hyped because we’re almost there!</p>\n<h3>Notifications</h3>\n<p>As part of our effort to make sure users have full control over apps that send notifications and how those are displayed, we’ve opted to make some changes to the way the Notifications indicator works. Right now, developers can identify their apps to the notifications server using <a href=\"https://elementary.io/docs/code/getting-started#notifications\">GLib.Notification</a>. However, we previously also had a heuristic that tried to guess the correct app for notifications that didn’t include an ID. This often resulted in notifications being grouped incorrectly, especially with Electron-based notifications. In order to fix this, we’ve done two things:</p>\n<ol>\n<li>We’ve removed the heuristic that tries to guess which app a notification was sent from. All notifications sent without an ID will be categorized as “Other” from now on.</li>\n<li>We’ve submitted patches upstream to <a href=\"https://github.com/electron/electron/pull/11913#issuecomment-365423133\">Electron</a>, <a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=1438051\">Firefox</a>, and <a href=\"https://bugzilla.gnome.org/show_bug.cgi?id=793474\">LibNotify</a> to help developers identify their apps properly to the notifications server. This should benefit not just elementary OS but also GNOME and other Open Source desktops. We’re happy to say that the Electron patch <a href=\"https://github.com/electron/electron/blob/master/brightray/browser/linux/libnotify_notification.cc#L127\">was committed</a> and we hope to see Electron apps identifying themselves correctly soon.</li>\n</ol>\n<p>We’ve made one more change that we’re interested in getting feedback on: By default, we’ve disabled notifications from “Other” apps. This means that apps that don’t correctly identify themselves to the notification server, and thus can’t be individually controlled, won’t be able to send notifications at all out of the box. You can always re-enable notifications for “Other” apps in System Settings → Notifications, but we’d encourage you to put pressure on the developers of your favorite apps to make sure they’re sending their app ID to the notifications server.</p>\n<h3>Files</h3>\n<p>As one of our most mature apps, Files predates our standardization on Vala as a programming language. It was historically written in C and still carries many C classes. I’m excited to say that a lot of hard work has gone into porting many of these old C classes to new, shiny Vala classes that are many hundreds of lines shorter. This means a much cleaner and more maintainable code base and has already led to a number of stability and performance improvements. We’ve also been able to drop several internal functions and instead use the functions of upstream libraries like Gtk+, GIO, etc.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*SU7X1RKtzZeh_j1d87EAOw@2x.png\"><figcaption>Oh yeah and also Files now fully supports HiDPI</figcaption></figure><p>As a bit of a cherry on top, Files now fully supports HiDPI and renders the icons and thumbnails in its views in crystal clarity.</p>\n<h3>System Settings</h3>\n<p>As part of our effort to make absolutely everything in elementary OS better, we’ve spent a lot of time in System Settings this cycle. This month, Printers got a lot of special attention and a significant redesign.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*N4FdB-U5T3PAlJqXl8SOxA@2x.png\"><figcaption>Printer settings has received a decent amount of design attention</figcaption></figure><p>Navigation between different types of settings is much clearer since moving the contents of the menu in the header to a dedicated tab. The “Print Test Page” button is now always visible in an obvious bottom-right position. Completed jobs are now always shown in the Print Queue and sorted separately from pending jobs regardless of their start time. We also make use of the <a href=\"https://valadoc.org/granite/Granite.DateTime.get_relative_datetime.html\">RelativeDateTime</a> utility in Granite to give you more human-readable times like “5m ago” or “Yesterday”. Last, but not least, the popovers for adding and removing printers are now dialogs and have simpler and clearer navigation as well.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1006/1*L8AHf304Qa-Fc9q1PSG_-w@2x.png\"><figcaption>Language &amp; Region settings got a slight design update; plus, infobars now have icons</figcaption></figure><p>Language &amp; Region settings saw a bit of a design update as it was ported to the new Granite SimpleSettingsPage. The link to Keyboard Settings is now a more-obvious labeled button and actions for the selected language now float to the bottom right of the window. The label for the currently selected language now also uses a larger font and is accompanied by the locale settings icon. This brings things more in line with many other settings pages you’ll see. You might also notice that InfoBars now come with a little icon on the left side that relates to their message type.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/537/1*v2AgWi18Zo-AWLZwy1cz6Q@2x.png\"></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/537/1*wjC2umnQzXkRF4E784qIvQ@2x.png\"><figcaption>New Report a Problem dialog in System Settings → About</figcaption></figure><p>If you weren’t already aware, you can find a link to report a problem with elementary OS in System Settings → About. Now, instead of going to a web page on Launchpad to select a component to file an issue against, we provide a dialog with categories and icons to help you filter down and find the correct GitHub repository to file an issue against.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1006/1*bVy0uG_BuJLmh39Ck6i0nA@2x.png\"><figcaption>You can now manually set your display’s scaling factor in System Settings → Displays</figcaption></figure><p>Two more small features landed in System Settings this month as well: you can now delete wallpapers from System Settings → Desktop → Wallpaper with a convenient secondary click menu and you can manually set your display’s scaling factor in System Settings → Displays.</p>\n<h3>Code</h3>\n<p>We spent some more time this month improving <a href=\"https://medium.com/elementaryos/scratch-is-now-code-2838e03134c7\">Code</a> to make it even better as your daily code editor.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*PEpq4xBKkJUKt1r6QZh2OQ@2x.png\"></figure><p>Code now comes with new smart backspace and home key behaviors, meaning it more often does what you’d expect when you hit those keys and cuts down on repeat presses. It also now accepts colons in addition to periods in the Line Number entry, meaning you can hit “123:45” to jump to the 45th character on line 123. We’ve added an “Open Folder” item on the welcome screen, making it that much faster and obvious to get started from a blank slate. And as a nice little touch, we added a little animation to the sidebar when switching between your project folders and symbols.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/201/1*NXwxa4BMhRCrOcwoB0VWXw@2x.png\"><figcaption>Cute rendition of our icon by EditorConfig’s <a href=\"https://github.com/editorconfig/editorconfig.github.com/pull/88\">Amon Keishima</a></figcaption></figure><p>And lastly, while <a href=\"https://medium.com/elementaryos/juno-progress-for-march-6fd2d553c237\">last month</a> we added EditorConfig support to Code, this month we turned it on by default, and Code was added to the front page of <a href=\"http://editorconfig.org/#download\">EditorConfig.org</a>!</p>\n<h3>And More</h3>\n<p>Many first party apps are now testing with <a href=\"https://medium.com/elementaryos/introducing-houston-ci-3179ec34e726\">Houston CI</a>, meeting the same strict publishing standards that we use for 3rd party apps in AppCenter. Plus, we’ve been working on a set of performance improvements for the panel that should make the desktop load more smoothly for users with slow, spinning hard disks.</p>\n<p>In additional to all of the above, you can always count on a healthy dose of code cleaning and general bug fixing. We’re now up to over <a href=\"https://github.com/search?q=org:elementary+is:closed+is:issue+milestone:%22juno-beta1%22\">490 closed issues</a> associated with the Juno Beta milestone.</p>\n<p>Juno is still under active development and we’re expecting to land even more fixes and optimizations before its big debut. Stay tuned to this blog for more highlights and announcements as we move toward the next major version of elementary OS. If you missed them, be sure to check out our previous posts about Juno:</p>\n<ul>\n<li><a href=\"https://medium.com/elementaryos/building-the-next-generation-of-apps-81234cc21a8a\">Building The Next Generation of Apps</a></li>\n<li><a href=\"https://medium.com/elementaryos/juno-progress-for-march-6fd2d553c237\">Juno Progress for March</a></li>\n<li><a href=\"https://medium.com/elementaryos/juno-progress-for-january-february-9b276042716e\">Juno Progress for January &amp; February</a></li>\n<li><a href=\"https://medium.com/elementaryos/lets-talk-about-elementary-os-5-0-juno-a3a65b97ee7e\">Let’s Talk About elementary OS 5.0 Juno</a></li>\n</ul>\n<p><em>Thank you to everyone who’s bought an app on AppCenter, our supporters on </em><a href=\"https://salt.bountysource.com/teams/elementary\"><em>Bountysource</em></a><em> and</em><a href=\"https://www.patreon.com/elementary\"><em> Patreon</em></a><em>, and those who’ve purchased a copy of </em><a href=\"https://elementary.io/\"><em>elementary OS</em></a><em> or merch from </em><a href=\"https://elementary.io/store/\"><em>our store</em></a><em>. Every contribution helps make all of this possible, and we wouldn’t be here without you! If you’d like to help improve elementary OS, don’t hesitate to </em><a href=\"https://elementary.io/get-involved\"><em>Get Involved</em></a><em>!</em></p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=91babaf6ee92\" width=\"1\" height=\"1\"><hr>\n<p><a href=\"https://medium.com/elementaryos/juno-progress-for-april-91babaf6ee92\">Juno Progress for April</a> was originally published in <a href=\"https://medium.com/elementaryos\">elementary OS</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>\n",
            "enclosure": {},
            "categories": [
                "linux",
                "preview",
                "open-source",
                "elementary-os",
                "juno"
            ]
        },
        {
            "title": "AppCenter Spotlight: quickDocs",
            "pubDate": "2018-04-23 16:01:01",
            "link": "https://medium.com/elementaryos/appcenter-spotlight-quickdocs-269c5a39a848?source=rss----ef863fa48176---4",
            "guid": "269c5a39a848",
            "author": "Cassidy James Blaede",
            "thumbnail": "https://cdn-images-1.medium.com/max/128/1*bShmiBWY3py4Zxx7g8MWxw@2x.png",
            "description": "\n<h4>Quickly Read Developer Docs</h4>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/128/1*bShmiBWY3py4Zxx7g8MWxw@2x.png\"></figure><figure><a href=\"https://appcenter.elementary.io/com.github.mdh34.quickdocs\"><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/164/1*uU5P3dtqz4TjfjYeL3Dm1Q@2x.png\"></a><figcaption>On elementary OS? Hit the button to get quickDocs.</figcaption></figure><p>quickDocs is a lightweight reader for developer documentation, made by Matt Harris. I chatted with Matt a bit about quickDocs and his experiences with elementary OS, AppCenter, and AppCenter Dashboard.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/200/1*zP0dTEh-tmefcu0yDCl3HA@2x.png\"></figure><h3>Meet Matt Harris</h3>\n<p>Matt is a student in the UK, and loves playing music in his spare time. “I play guitar, sax, and piano. They act as a bit of a break from studying,” he told me. In between studying and making music, he also spends his time using and contributing to open source projects like elementary OS. “I’ve been using elementary OS for just under a year I think. I settled on it after hopping between Arch and Ubuntu in the end because of how polished it was.”</p>\n<p>The idea for quickDocs itself actually came when Matt was looking at the elementary developer documentation. “I was inspired to make quickDocs after coming across the <a href=\"https://developer.elementary.io/\">developer.elementary.io</a> website,” he explained. “After I saw how straightforward it was to publish an app on AppCenter, I started thinking up ideas.” Then it hit him. “One of the main tools I use while programming are developer docs, so I thought it would be perfect to make a native app instead of keeping loads of browser tabs open.” Thus, quickDocs was born.</p>\n<h3>The Journey to 2.0</h3>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*RroDQe8PUP44_FOw.png\"></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*m_r5Si7peK7eqwZP.png\"><figcaption>quickDocs supports both Valadoc and DevDocs</figcaption></figure><p>When first released as 1.0 in January, quickDocs was already a competent documentation viewer with support for both Valadoc and DevDocs. In 1.1, Matt added a dark mode, while 1.2 brought initial offline support. But with version 2, quickDocs has been revamped.</p>\n<p>“The main improvements of the 2.0 release was improving the offline Valadoc functionality,” Matt told me. “Before, pressing the download button would open a Terminal that ran a hacky script to parse all the URLs, download them, and unzip them to a folder,” he explained. “Then if the user was offline, I’d use the built-in WebKit file view to show the folders and allow the user to view them.” It was a start, but wasn’t the prettiest thing.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*HT_6tPGKZ12By1ajFQeNgQ.png\"></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*5uYYRnwp3faA81PXlYLugQ.png\"><figcaption>The initial offline experience from quickDocs 1.2</figcaption></figure><p>But now he’s has added a new UI for downloading offline docs natively, plus a brand new offline docs UI that allows for searching and easier viewing. “You can download or remove only the docs you want, then they’re shown using the DevHelp library, which provides a nice native UI with search capabilities.”</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*k1MPtos9uG79loNT.png\"></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*GFAfHGpdUEK1fJIoAOklpg.png\"><figcaption>Download, manage, and browse offline library docs right in the app</figcaption></figure><p>It’s a much more integrated experience, and will make developers’ lives easier whether they’re online or off.</p>\n<h3>Developing for AppCenter</h3>\n<p>Matt’s experience developing for AppCenter on elementary OS has been a positive one. He considers quickDocs to be his first proper app, and part of his success has come from the ease of developing for elementary OS and publishing on AppCenter. “Developing with AppCenter has been a joy,” he acclaimed. The community of first- and third-party developers is also a boon. “Publishing with AppCenter Dashboard is super easy, and the support from the community is amazing — if you’re stuck on something, there’s always someone there to help you.”</p>\n<p>Matt has also been helping us test the <a href=\"https://medium.com/elementaryos/introducing-houston-ci-3179ec34e726\">just-announced Houston CI service</a> before the wider roll out, and it’s a definite time saver. “Occasionally I’ve been caught out by the odd thing during the testing process, but now using Houston CI has helped me catch issues before I publish.” Developers, stay tuned to our Medium for updates about Houston CI!</p>\n<h3>Get quickDocs</h3>\n<p>quickDocs 2.0 is <a href=\"https://appcenter.elementary.io/com.github.mdh34.quickdocs\">available on AppCenter</a> today for the suggested price of <strong>just $2</strong>. Its source code is also openly-licensed and <a href=\"https://github.com/mdh34/quickDocs\">available on GitHub</a>.</p>\n<figure><a href=\"https://appcenter.elementary.io/com.github.mdh34.quickdocs\"><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/164/1*uU5P3dtqz4TjfjYeL3Dm1Q@2x.png\"></a><figcaption>On elementary OS? Hit the button to get quickDocs.</figcaption></figure><p>What does the future hold for the app? “At the moment I’m quite happy with quickDocs,” Matt says. “But I’m always open to feature suggestions — if I come across another great docs source I will definitely add that.”</p>\n<p>To hear more from Matt, be sure to follow him on <a href=\"https://github.com/mdh34\">GitHub</a>!</p>\n<p><em>Thanks to everyone who’s bought an app like quickDocs on AppCenter, developers publishing their apps on AppCenter, our supporters on</em><a href=\"https://salt.bountysource.com/teams/elementary\"><em> Bountysource</em></a><em> and</em><a href=\"https://www.patreon.com/elementary\"><em> Patreon</em></a><em>, and those who’ve purchased a copy of </em><a href=\"https://elementary.io/\"><em>elementary OS</em></a><em> or merch from</em><a href=\"https://elementary.io/store/\"><em> our store</em></a><em>. Each and every contribution helps make all of this possible, and we wouldn’t be here without you.</em></p>\n<p><em>If you’d like to help improve elementary OS, don’t hesitate to </em><a href=\"https://elementary.io/get-involved\"><em>Get Involved</em></a><em>!</em></p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=269c5a39a848\" width=\"1\" height=\"1\"><hr>\n<p><a href=\"https://medium.com/elementaryos/appcenter-spotlight-quickdocs-269c5a39a848\">AppCenter Spotlight: quickDocs</a> was originally published in <a href=\"https://medium.com/elementaryos\">elementary OS</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>\n",
            "content": "\n<h4>Quickly Read Developer Docs</h4>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/128/1*bShmiBWY3py4Zxx7g8MWxw@2x.png\"></figure><figure><a href=\"https://appcenter.elementary.io/com.github.mdh34.quickdocs\"><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/164/1*uU5P3dtqz4TjfjYeL3Dm1Q@2x.png\"></a><figcaption>On elementary OS? Hit the button to get quickDocs.</figcaption></figure><p>quickDocs is a lightweight reader for developer documentation, made by Matt Harris. I chatted with Matt a bit about quickDocs and his experiences with elementary OS, AppCenter, and AppCenter Dashboard.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/200/1*zP0dTEh-tmefcu0yDCl3HA@2x.png\"></figure><h3>Meet Matt Harris</h3>\n<p>Matt is a student in the UK, and loves playing music in his spare time. “I play guitar, sax, and piano. They act as a bit of a break from studying,” he told me. In between studying and making music, he also spends his time using and contributing to open source projects like elementary OS. “I’ve been using elementary OS for just under a year I think. I settled on it after hopping between Arch and Ubuntu in the end because of how polished it was.”</p>\n<p>The idea for quickDocs itself actually came when Matt was looking at the elementary developer documentation. “I was inspired to make quickDocs after coming across the <a href=\"https://developer.elementary.io/\">developer.elementary.io</a> website,” he explained. “After I saw how straightforward it was to publish an app on AppCenter, I started thinking up ideas.” Then it hit him. “One of the main tools I use while programming are developer docs, so I thought it would be perfect to make a native app instead of keeping loads of browser tabs open.” Thus, quickDocs was born.</p>\n<h3>The Journey to 2.0</h3>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*RroDQe8PUP44_FOw.png\"></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*m_r5Si7peK7eqwZP.png\"><figcaption>quickDocs supports both Valadoc and DevDocs</figcaption></figure><p>When first released as 1.0 in January, quickDocs was already a competent documentation viewer with support for both Valadoc and DevDocs. In 1.1, Matt added a dark mode, while 1.2 brought initial offline support. But with version 2, quickDocs has been revamped.</p>\n<p>“The main improvements of the 2.0 release was improving the offline Valadoc functionality,” Matt told me. “Before, pressing the download button would open a Terminal that ran a hacky script to parse all the URLs, download them, and unzip them to a folder,” he explained. “Then if the user was offline, I’d use the built-in WebKit file view to show the folders and allow the user to view them.” It was a start, but wasn’t the prettiest thing.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*HT_6tPGKZ12By1ajFQeNgQ.png\"></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*5uYYRnwp3faA81PXlYLugQ.png\"><figcaption>The initial offline experience from quickDocs 1.2</figcaption></figure><p>But now he’s has added a new UI for downloading offline docs natively, plus a brand new offline docs UI that allows for searching and easier viewing. “You can download or remove only the docs you want, then they’re shown using the DevHelp library, which provides a nice native UI with search capabilities.”</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*k1MPtos9uG79loNT.png\"></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*GFAfHGpdUEK1fJIoAOklpg.png\"><figcaption>Download, manage, and browse offline library docs right in the app</figcaption></figure><p>It’s a much more integrated experience, and will make developers’ lives easier whether they’re online or off.</p>\n<h3>Developing for AppCenter</h3>\n<p>Matt’s experience developing for AppCenter on elementary OS has been a positive one. He considers quickDocs to be his first proper app, and part of his success has come from the ease of developing for elementary OS and publishing on AppCenter. “Developing with AppCenter has been a joy,” he acclaimed. The community of first- and third-party developers is also a boon. “Publishing with AppCenter Dashboard is super easy, and the support from the community is amazing — if you’re stuck on something, there’s always someone there to help you.”</p>\n<p>Matt has also been helping us test the <a href=\"https://medium.com/elementaryos/introducing-houston-ci-3179ec34e726\">just-announced Houston CI service</a> before the wider roll out, and it’s a definite time saver. “Occasionally I’ve been caught out by the odd thing during the testing process, but now using Houston CI has helped me catch issues before I publish.” Developers, stay tuned to our Medium for updates about Houston CI!</p>\n<h3>Get quickDocs</h3>\n<p>quickDocs 2.0 is <a href=\"https://appcenter.elementary.io/com.github.mdh34.quickdocs\">available on AppCenter</a> today for the suggested price of <strong>just $2</strong>. Its source code is also openly-licensed and <a href=\"https://github.com/mdh34/quickDocs\">available on GitHub</a>.</p>\n<figure><a href=\"https://appcenter.elementary.io/com.github.mdh34.quickdocs\"><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/164/1*uU5P3dtqz4TjfjYeL3Dm1Q@2x.png\"></a><figcaption>On elementary OS? Hit the button to get quickDocs.</figcaption></figure><p>What does the future hold for the app? “At the moment I’m quite happy with quickDocs,” Matt says. “But I’m always open to feature suggestions — if I come across another great docs source I will definitely add that.”</p>\n<p>To hear more from Matt, be sure to follow him on <a href=\"https://github.com/mdh34\">GitHub</a>!</p>\n<p><em>Thanks to everyone who’s bought an app like quickDocs on AppCenter, developers publishing their apps on AppCenter, our supporters on</em><a href=\"https://salt.bountysource.com/teams/elementary\"><em> Bountysource</em></a><em> and</em><a href=\"https://www.patreon.com/elementary\"><em> Patreon</em></a><em>, and those who’ve purchased a copy of </em><a href=\"https://elementary.io/\"><em>elementary OS</em></a><em> or merch from</em><a href=\"https://elementary.io/store/\"><em> our store</em></a><em>. Each and every contribution helps make all of this possible, and we wouldn’t be here without you.</em></p>\n<p><em>If you’d like to help improve elementary OS, don’t hesitate to </em><a href=\"https://elementary.io/get-involved\"><em>Get Involved</em></a><em>!</em></p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=269c5a39a848\" width=\"1\" height=\"1\"><hr>\n<p><a href=\"https://medium.com/elementaryos/appcenter-spotlight-quickdocs-269c5a39a848\">AppCenter Spotlight: quickDocs</a> was originally published in <a href=\"https://medium.com/elementaryos\">elementary OS</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>\n",
            "enclosure": {},
            "categories": [
                "open-source",
                "developer-tools",
                "documentation",
                "elementary-os",
                "appcenter-spotlight"
            ]
        },
        {
            "title": "Introducing Houston CI",
            "pubDate": "2018-04-20 02:39:20",
            "link": "https://medium.com/elementaryos/introducing-houston-ci-3179ec34e726?source=rss----ef863fa48176---4",
            "guid": "3179ec34e726",
            "author": "Daniel Foré",
            "thumbnail": "https://cdn-images-1.medium.com/max/998/1*BXWtlAR-1MK750SRVtFlZw@2x.png",
            "description": "\n<h4>Continuous validation testing for AppCenter apps</h4>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/998/1*BXWtlAR-1MK750SRVtFlZw@2x.png\"><figcaption>Dogfooding Houston CI on elementary core apps</figcaption></figure><p>In our previous post about <a href=\"https://medium.com/elementaryos/building-the-next-generation-of-apps-81234cc21a8a\">Juno platform goals</a>, we talked a little bit about continuous integration testing (CI) and a project we’ve been working on to bring the suite of automated tests we run for AppCenter Dashboard to a continuous format that anyone can use. Today, I’m proud to announce that Houston CI is ready for wider testing!</p>\n<h3>What exactly is “Houston CI”?</h3>\n<p>Houston is the code name for AppCenter Dashboard, the online service component of AppCenter. When you submit your app for publishing in AppCenter, a suite of automated tests is run to check for things like metadata validity, RDNN file naming, proper file installation, and successful package builds. These automated tests allow us to ensure a minimum amount of quality control for all packages published in AppCenter, and ensure we aren’t spending extra human time reviewing apps that don’t even build or meet the basic guidelines.</p>\n<p>As part of our work on the Juno release, AppCenter Dashboard had to be updated with a major new trick: the ability to build packages for both Loki and Juno. This has a few implications that we’ll get into in a moment, but for now you should know that the basis of Houston CI is AppCenter Dashboard 2.0. In other words, the same code powers Houston CI and the AppCenter Dashboard publishing process.</p>\n<h3>Why do I want it?</h3>\n<p>If you’ve published an app in AppCenter before, you may have gone through something like this:</p>\n<blockquote>\n<strong>You</strong>: Excitedly release version 1.0 of your app on GitHub and hit the big publish button on AppCenter Dashboard<br><strong>AppCenter Dashboard</strong>: files some issues in your tracker, including some packaging errors<br><strong>You</strong>: Fix all the errors! Release 1.0.1!<br><strong>AppCenter Dashboard</strong>: More issue reports about packaging<br><strong>You, frustrated</strong>: 1.0.2!<br><strong>AppCenter Dashboard, mockingly</strong>: issue reports</blockquote>\n<p>Packaging and build failures can be annoying and having to go through the whole publishing process to try to reproduce them is tedious. Using Houston CI means you can find out if master passes automated testing <em>before</em> you release. You can even find out if branches or contributor-submitted PRs pass before they’re allowed to be merged. And since Houston CI also tests your package builds, you can know if a particular feature branch breaks your packaging and act accordingly ahead of time. Pretty handy stuff.</p>\n<h3>How do I use it?</h3>\n<p>Adding Houston CI to your GitHub project is very straightforward. If you’ve never used Travis CI before, check out their <a href=\"https://docs.travis-ci.com/user/getting-started/\">Getting Started Guide</a> first and come back here later. If you’re familiar with Travis, then you can copy the contents of the following gist to a .travis.yml file in your project’s root to begin testing:</p>\n<a href=\"https://medium.com/media/c23c33335571eb59f74ad22f26a65686/href\">https://medium.com/media/c23c33335571eb59f74ad22f26a65686/href</a><p>You might notice the environmental variable DIST and the fact that this configuration tests against both Loki and Juno (see lines 26 and 27). This means you can get ahead of the curve today and make sure your project builds and passes tests for Juno before we open publishing or release Juno beta. That’s pretty neat.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1017/1*kn5vWpCMRwOpkdV_snfLlA.png\"><figcaption>Houston CI letting you know some things are missing</figcaption></figure><h3>Anything else I should know?</h3>\n<p>Houston CI and the upcoming version of AppCenter Dashboard comes with a major new feature you should know about: support for out of tree packaging. Soon we’ll be recommending that developers push their packaging to an “orphan branch” called deb-packaging. This is pretty convenient if you’re publishing for other Linux-based OSes and don’t want elementary-specific packaging in your master branch, but it also allows AppCenter dashboard to support separate packaging branches for each release of elementary OS.</p>\n<p>If you push a branch called deb-packaging-loki, AppCenter Dashboard will use that packaging branch for Loki builds. This means you can set build flags or adjust dependencies as needed to ensure your app builds and is releasable on multiple supported versions of elementary OS, if you choose to do so.</p>\n<p>Similarly, you can push packaging branches that match the naming of other branches for Houston CI. So if you have a feature branch called big-new-thing, you can create a matching packaging branch called deb-packaging-big-new-thing and Houston CI will test these branches together. This is especially handy if a feature branch introduces a new dependency. You can test a new, matching packaging branch and never introduce breaks in a CI-based workflow.</p>\n<p>We’ve had a lot of success with the Houston V2 worker and Houston CI so far, but some of these features are brand new, so we’re expecting to find some issues with your help testing! If you think you’ve done everything right, but Houston CI just won’t build your app, make sure to <a href=\"https://github.com/elementary/houston/issues\">open an issue report in GitHub</a>.</p>\n<p>For more details, check <a href=\"https://github.com/elementary/houston/wiki/Continuous-Integration\">the Houston wiki</a>.</p>\n<p>If you need help or get stuck, don’t panic! You can always join <a href=\"https://gitter.im/elementary/houston\">our Gitter</a> for questions about AppCenter Dashboard or jump in to the <a href=\"https://elementarycommunity.slack.com/join/shared_invite/enQtMjg3NTExNDIwOTQ1LWExZjEzZGE4YjY4MjUwMTQ1MTVjZDJlNTFhNGRlN2FmZmUxNjhmZTI1YmNmZjQ0ODMxYzcwZTI1OTVlMTQyNWI\">community Slack</a>. Houston CI is still rather new, so we’re hoping to get your feedback and learn how we can make it better. If you’re familiar with Javascript and want to help us make AppCenter Dashboard or Houston CI better, <a href=\"https://github.com/elementary/houston\">it’s Open Source on GitHub</a>. We’d love to see your pull requests!</p>\n<p><em>Thanks again to all the developers making apps for AppCenter, everyone who has bought an app on AppCenter, our supporters on </em><a href=\"https://salt.bountysource.com/teams/elementary\"><em>Bountysource</em></a><em> and</em><a href=\"https://www.patreon.com/elementary\"><em> Patreon</em></a><em>, and those who’ve purchased a copy of </em><a href=\"https://elementary.io/\"><em>elementary OS</em></a><em> or merch from </em><a href=\"https://elementary.io/store/\"><em>our store</em></a><em>. Every contribution helps make all of this possible, and we wouldn’t be here without you! If you’d like to help improve elementary OS, don’t hesitate to </em><a href=\"https://elementary.io/get-involved\"><em>Get Involved</em></a><em>!</em></p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=3179ec34e726\" width=\"1\" height=\"1\"><hr>\n<p><a href=\"https://medium.com/elementaryos/introducing-houston-ci-3179ec34e726\">Introducing Houston CI</a> was originally published in <a href=\"https://medium.com/elementaryos\">elementary OS</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>\n",
            "content": "\n<h4>Continuous validation testing for AppCenter apps</h4>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/998/1*BXWtlAR-1MK750SRVtFlZw@2x.png\"><figcaption>Dogfooding Houston CI on elementary core apps</figcaption></figure><p>In our previous post about <a href=\"https://medium.com/elementaryos/building-the-next-generation-of-apps-81234cc21a8a\">Juno platform goals</a>, we talked a little bit about continuous integration testing (CI) and a project we’ve been working on to bring the suite of automated tests we run for AppCenter Dashboard to a continuous format that anyone can use. Today, I’m proud to announce that Houston CI is ready for wider testing!</p>\n<h3>What exactly is “Houston CI”?</h3>\n<p>Houston is the code name for AppCenter Dashboard, the online service component of AppCenter. When you submit your app for publishing in AppCenter, a suite of automated tests is run to check for things like metadata validity, RDNN file naming, proper file installation, and successful package builds. These automated tests allow us to ensure a minimum amount of quality control for all packages published in AppCenter, and ensure we aren’t spending extra human time reviewing apps that don’t even build or meet the basic guidelines.</p>\n<p>As part of our work on the Juno release, AppCenter Dashboard had to be updated with a major new trick: the ability to build packages for both Loki and Juno. This has a few implications that we’ll get into in a moment, but for now you should know that the basis of Houston CI is AppCenter Dashboard 2.0. In other words, the same code powers Houston CI and the AppCenter Dashboard publishing process.</p>\n<h3>Why do I want it?</h3>\n<p>If you’ve published an app in AppCenter before, you may have gone through something like this:</p>\n<blockquote>\n<strong>You</strong>: Excitedly release version 1.0 of your app on GitHub and hit the big publish button on AppCenter Dashboard<br><strong>AppCenter Dashboard</strong>: files some issues in your tracker, including some packaging errors<br><strong>You</strong>: Fix all the errors! Release 1.0.1!<br><strong>AppCenter Dashboard</strong>: More issue reports about packaging<br><strong>You, frustrated</strong>: 1.0.2!<br><strong>AppCenter Dashboard, mockingly</strong>: issue reports</blockquote>\n<p>Packaging and build failures can be annoying and having to go through the whole publishing process to try to reproduce them is tedious. Using Houston CI means you can find out if master passes automated testing <em>before</em> you release. You can even find out if branches or contributor-submitted PRs pass before they’re allowed to be merged. And since Houston CI also tests your package builds, you can know if a particular feature branch breaks your packaging and act accordingly ahead of time. Pretty handy stuff.</p>\n<h3>How do I use it?</h3>\n<p>Adding Houston CI to your GitHub project is very straightforward. If you’ve never used Travis CI before, check out their <a href=\"https://docs.travis-ci.com/user/getting-started/\">Getting Started Guide</a> first and come back here later. If you’re familiar with Travis, then you can copy the contents of the following gist to a .travis.yml file in your project’s root to begin testing:</p>\n<a href=\"https://medium.com/media/c23c33335571eb59f74ad22f26a65686/href\">https://medium.com/media/c23c33335571eb59f74ad22f26a65686/href</a><p>You might notice the environmental variable DIST and the fact that this configuration tests against both Loki and Juno (see lines 26 and 27). This means you can get ahead of the curve today and make sure your project builds and passes tests for Juno before we open publishing or release Juno beta. That’s pretty neat.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1017/1*kn5vWpCMRwOpkdV_snfLlA.png\"><figcaption>Houston CI letting you know some things are missing</figcaption></figure><h3>Anything else I should know?</h3>\n<p>Houston CI and the upcoming version of AppCenter Dashboard comes with a major new feature you should know about: support for out of tree packaging. Soon we’ll be recommending that developers push their packaging to an “orphan branch” called deb-packaging. This is pretty convenient if you’re publishing for other Linux-based OSes and don’t want elementary-specific packaging in your master branch, but it also allows AppCenter dashboard to support separate packaging branches for each release of elementary OS.</p>\n<p>If you push a branch called deb-packaging-loki, AppCenter Dashboard will use that packaging branch for Loki builds. This means you can set build flags or adjust dependencies as needed to ensure your app builds and is releasable on multiple supported versions of elementary OS, if you choose to do so.</p>\n<p>Similarly, you can push packaging branches that match the naming of other branches for Houston CI. So if you have a feature branch called big-new-thing, you can create a matching packaging branch called deb-packaging-big-new-thing and Houston CI will test these branches together. This is especially handy if a feature branch introduces a new dependency. You can test a new, matching packaging branch and never introduce breaks in a CI-based workflow.</p>\n<p>We’ve had a lot of success with the Houston V2 worker and Houston CI so far, but some of these features are brand new, so we’re expecting to find some issues with your help testing! If you think you’ve done everything right, but Houston CI just won’t build your app, make sure to <a href=\"https://github.com/elementary/houston/issues\">open an issue report in GitHub</a>.</p>\n<p>For more details, check <a href=\"https://github.com/elementary/houston/wiki/Continuous-Integration\">the Houston wiki</a>.</p>\n<p>If you need help or get stuck, don’t panic! You can always join <a href=\"https://gitter.im/elementary/houston\">our Gitter</a> for questions about AppCenter Dashboard or jump in to the <a href=\"https://elementarycommunity.slack.com/join/shared_invite/enQtMjg3NTExNDIwOTQ1LWExZjEzZGE4YjY4MjUwMTQ1MTVjZDJlNTFhNGRlN2FmZmUxNjhmZTI1YmNmZjQ0ODMxYzcwZTI1OTVlMTQyNWI\">community Slack</a>. Houston CI is still rather new, so we’re hoping to get your feedback and learn how we can make it better. If you’re familiar with Javascript and want to help us make AppCenter Dashboard or Houston CI better, <a href=\"https://github.com/elementary/houston\">it’s Open Source on GitHub</a>. We’d love to see your pull requests!</p>\n<p><em>Thanks again to all the developers making apps for AppCenter, everyone who has bought an app on AppCenter, our supporters on </em><a href=\"https://salt.bountysource.com/teams/elementary\"><em>Bountysource</em></a><em> and</em><a href=\"https://www.patreon.com/elementary\"><em> Patreon</em></a><em>, and those who’ve purchased a copy of </em><a href=\"https://elementary.io/\"><em>elementary OS</em></a><em> or merch from </em><a href=\"https://elementary.io/store/\"><em>our store</em></a><em>. Every contribution helps make all of this possible, and we wouldn’t be here without you! If you’d like to help improve elementary OS, don’t hesitate to </em><a href=\"https://elementary.io/get-involved\"><em>Get Involved</em></a><em>!</em></p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=3179ec34e726\" width=\"1\" height=\"1\"><hr>\n<p><a href=\"https://medium.com/elementaryos/introducing-houston-ci-3179ec34e726\">Introducing Houston CI</a> was originally published in <a href=\"https://medium.com/elementaryos\">elementary OS</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>\n",
            "enclosure": {},
            "categories": [
                "travis",
                "continuous-integration",
                "open-source",
                "appcenter",
                "elementary-os"
            ]
        },
        {
            "title": "Building The Next Generation of Apps",
            "pubDate": "2018-04-09 16:26:01",
            "link": "https://medium.com/elementaryos/building-the-next-generation-of-apps-81234cc21a8a?source=rss----ef863fa48176---4",
            "guid": "81234cc21a8a",
            "author": "Daniel Foré",
            "thumbnail": "https://cdn-images-1.medium.com/max/800/1*mSYq1zRGcnUw7QBam3Lyhg.png",
            "description": "\n<h4>Platform improvements and goals for Juno</h4>\n<p>For a little over 7 years now, elementary has set out to bring killer apps to Open Source desktops. During the Juno development cycle we’ve been working hard to deliver our vision of those apps, but not all of the work we’ve done is visible to the casual user. In this post, I’ll be talking about a bit of history surrounding how we put things together under the hood and what the new normal looks like for elementary apps. Strap on your dev helmets, and let’s get geeky.</p>\n<h3>Gen I</h3>\n<p>We delivered the very first version of elementary OS with our best shot at developing compelling Open Source apps. We had no standard language. Apps were written in Python, C#, C, Vala, anything. There was no code style guide. Our code was very messy and not very consistent. Gtk2 was a thing. And also drawing things by hand in Cairo. It was the “duct tape and bailing wire” era of elementary app development.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/800/1*mSYq1zRGcnUw7QBam3Lyhg.png\"><figcaption>0.1 Jupiter, best viewed with <a href=\"https://youtu.be/-w-58hQ9dLk?t=10s\">this accompanying score</a></figcaption></figure><p>During our trip to the Ubuntu Developer Summit way back in 2011 after pitching some of our new apps to the Ubuntu Desktop Team, we sat down with Unity developer Jason Smith who delivered a hard truth to us: we weren’t a great code shop and we needed to change the way we worked.</p>\n<h3>Gen II</h3>\n<p>We made a lot of hard choices during the development of Luna and some of them cost us valuable contributors. The two biggest changes were standardizing on Vala and introducing code reviews.</p>\n<p>Picking a standard language was really the gateway to raising our standards. This made it much easier for anyone working on one app to be able to easily contribute to another app and it allowed us to create a single code style guide that everyone could become familiar with. Later it would allow us to write comprehensive developer docs and give 3rd parties a clear path to delivering their apps to elementary OS users. We also chose a standard build system with CMake for similar reasons.</p>\n<p>Introducing code reviews was a much more arduous task. Unlike modern tools like GitHub, our code hosting platform of yore, Launchpad, did not have any native concept of reviews. We started using a bot called Tarmac which was what developers at Canonical had begun using. It was slow and painful and some developers took it really personally that we wanted their code to be peer reviewed before it could land in the development trunk.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/901/1*1Zad5prd_-lc9vu0Zspd6A.jpeg\"><figcaption>Files with a Gtk+ HeaderBar in 0.3 Freya</figcaption></figure><p>Starting in Luna, but throughout Freya and even into Loki, we strived for a pure Gtk3 desktop and I’m really proud to say that we finished our transition before many other projects had even begun theirs. We embraced and implemented HeaderBars across the board, even in places where GNOME hasn’t yet. Gtk3 also allowed us to create more complex, custom styles with CSS and introduce better typography into our apps with much finer grained control over font heights and weights.</p>\n<p>We also introduced a new library called Granite to share common code across projects and extend the things we got from Gtk+. Many of the widgets we built would eventually be replaced by implementations in Gtk+ itself including HeaderBars, Popovers, and more. While Granite continues to be improved and new functions and widgets are added, we’re also very excited when we can deprecate classes as Gtk+ gains features.</p>\n<p>Gen II was long and good and it brought a lot of great advancements to the way we built apps. It’s been a time of gradual change without too many major upsets since we made those hard choices in Luna. Time to shake things up.</p>\n<h3>Gen III</h3>\n<p>With the newest generation, we’ve made several large changes with the goal of making it much easier for new contributors to get involved and for old contributors to maintain mature code bases.</p>\n<p>One of the biggest ones is fully embracing Reverse Domain Name Notation (RDNN). Because of our long history, new contributors might find that when they, for example, clone elementary/files the binary name of the project is pantheon-files, the .desktop is called org.pantheon.files, and settings are stored at net.launchpad.marlin. When all naming is RDNN based, new contributors can easily predict that the names of binaries, .desktops, GSettings paths, etc will always be, for example, io.elementary.files. This also guarantees that we don’t have file naming conflicts with packages from our upstreams like Debian or Ubuntu. You can read more about that in Cassidy’s previous article, “<a href=\"https://medium.com/elementaryos/cleaning-up-app-codenames-ef9fc637ddef\">Cleaning Up App Codenames</a>”.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/233/1*fORMthbYIEw8Yv6yN9iK8w.gif\"><figcaption>A visual representation of how Gen III feels under the hood</figcaption></figure><p>We’re also pushing to have a consistent source tree directory structure with standard files like Application.vala in the src directory which contains the Application class (imagine that!), an expectation that you can find .desktops and appdata.xml in the data directory, etc. This makes it easier for developers working on multiple projects to quickly find common files across projects.</p>\n<p>Gen III apps also make use of GResources for custom assets like icons, images, and CSS instead of installing files to the filesystem. This is important both for ensuring that these assets don’t cause packaging conflicts if installed to a system directory like the hicolor icon directory and for reducing IO errors and increasing performance.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/764/1*25EUroEzjXy5AOcWLFYQZw.png\"></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/765/1*LBlGHTIiRbJyJixZjf41iA@2x.png\"><figcaption>Left: Lingo a Gen I app | Right: Palaura a Gen III app</figcaption></figure><p>You’ll also notice many Gen III apps making much more comprehensive use of Gtk.CSS to provide branding, including things like more stylized typefaces and colored HeaderBars. You can read more about some of the tools available to developers here in our most recent <a href=\"https://medium.com/elementaryos/developer-tips-branding-your-app-a57cb44d31d3\">Developer Tips</a> article.</p>\n<p><a href=\"https://medium.com/elementaryos/peace-out-about-dialogs-8efa956c0562\">We talked last year</a> about embracing new metadata standards in the form of AppStream and ditching “About” dialogs. We’ll be continuing down this path and are currently investigating new standards like <a href=\"https://hughsie.github.io/oars/\">OARS</a> which would allow new forms of Parental Controls and ensure that users have more control over the kind of content that is consumed on their devices.</p>\n<p>We’ve also made a ton of progress with building all of our apps with Meson and have contributed patches upstream for better Vala support and localization tools. You can read more about that <a href=\"https://medium.com/elementaryos/all-aboard-the-meson-future-hype-train-2b6c478b6b9e\">here</a>.</p>\n<p>Last, but not least, we’ve made much more comprehensive use of automated testing in the form of Travis CI on GitHub and Flightcheck, our testing solution for AppCenter Dashboard. Continuous testing in addition to code review helps us to keep code and metadata quality high and avoid introducing regressions. At the moment, we’re testing a continuous version of Flightcheck to make it easier for anyone to run the full suite of elementary-maintained tests with Travis. More on that soon.</p>\n<p>We also hope to deliver more tools and better documentation throughout the Juno cycle, so stay tuned here to our blog for more info about how you too can deliver killer Open Source apps.</p>\n<p><em>Thanks again to all the developers making apps for AppCenter, everyone who has bought an app on AppCenter, our supporters on </em><a href=\"https://salt.bountysource.com/teams/elementary\"><em>Bountysource</em></a><em> and</em><a href=\"https://www.patreon.com/elementary\"><em> Patreon</em></a><em>, and those who’ve purchased a copy of </em><a href=\"https://elementary.io/\"><em>elementary OS</em></a><em> or merch from </em><a href=\"https://elementary.io/store/\"><em>our store</em></a><em>. Every contribution helps make all of this possible, and we wouldn’t be here without you! If you’d like to help improve elementary OS, don’t hesitate to </em><a href=\"https://elementary.io/get-involved\"><em>Get Involved</em></a><em>!</em></p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=81234cc21a8a\" width=\"1\" height=\"1\"><hr>\n<p><a href=\"https://medium.com/elementaryos/building-the-next-generation-of-apps-81234cc21a8a\">Building The Next Generation of Apps</a> was originally published in <a href=\"https://medium.com/elementaryos\">elementary OS</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>\n",
            "content": "\n<h4>Platform improvements and goals for Juno</h4>\n<p>For a little over 7 years now, elementary has set out to bring killer apps to Open Source desktops. During the Juno development cycle we’ve been working hard to deliver our vision of those apps, but not all of the work we’ve done is visible to the casual user. In this post, I’ll be talking about a bit of history surrounding how we put things together under the hood and what the new normal looks like for elementary apps. Strap on your dev helmets, and let’s get geeky.</p>\n<h3>Gen I</h3>\n<p>We delivered the very first version of elementary OS with our best shot at developing compelling Open Source apps. We had no standard language. Apps were written in Python, C#, C, Vala, anything. There was no code style guide. Our code was very messy and not very consistent. Gtk2 was a thing. And also drawing things by hand in Cairo. It was the “duct tape and bailing wire” era of elementary app development.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/800/1*mSYq1zRGcnUw7QBam3Lyhg.png\"><figcaption>0.1 Jupiter, best viewed with <a href=\"https://youtu.be/-w-58hQ9dLk?t=10s\">this accompanying score</a></figcaption></figure><p>During our trip to the Ubuntu Developer Summit way back in 2011 after pitching some of our new apps to the Ubuntu Desktop Team, we sat down with Unity developer Jason Smith who delivered a hard truth to us: we weren’t a great code shop and we needed to change the way we worked.</p>\n<h3>Gen II</h3>\n<p>We made a lot of hard choices during the development of Luna and some of them cost us valuable contributors. The two biggest changes were standardizing on Vala and introducing code reviews.</p>\n<p>Picking a standard language was really the gateway to raising our standards. This made it much easier for anyone working on one app to be able to easily contribute to another app and it allowed us to create a single code style guide that everyone could become familiar with. Later it would allow us to write comprehensive developer docs and give 3rd parties a clear path to delivering their apps to elementary OS users. We also chose a standard build system with CMake for similar reasons.</p>\n<p>Introducing code reviews was a much more arduous task. Unlike modern tools like GitHub, our code hosting platform of yore, Launchpad, did not have any native concept of reviews. We started using a bot called Tarmac which was what developers at Canonical had begun using. It was slow and painful and some developers took it really personally that we wanted their code to be peer reviewed before it could land in the development trunk.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/901/1*1Zad5prd_-lc9vu0Zspd6A.jpeg\"><figcaption>Files with a Gtk+ HeaderBar in 0.3 Freya</figcaption></figure><p>Starting in Luna, but throughout Freya and even into Loki, we strived for a pure Gtk3 desktop and I’m really proud to say that we finished our transition before many other projects had even begun theirs. We embraced and implemented HeaderBars across the board, even in places where GNOME hasn’t yet. Gtk3 also allowed us to create more complex, custom styles with CSS and introduce better typography into our apps with much finer grained control over font heights and weights.</p>\n<p>We also introduced a new library called Granite to share common code across projects and extend the things we got from Gtk+. Many of the widgets we built would eventually be replaced by implementations in Gtk+ itself including HeaderBars, Popovers, and more. While Granite continues to be improved and new functions and widgets are added, we’re also very excited when we can deprecate classes as Gtk+ gains features.</p>\n<p>Gen II was long and good and it brought a lot of great advancements to the way we built apps. It’s been a time of gradual change without too many major upsets since we made those hard choices in Luna. Time to shake things up.</p>\n<h3>Gen III</h3>\n<p>With the newest generation, we’ve made several large changes with the goal of making it much easier for new contributors to get involved and for old contributors to maintain mature code bases.</p>\n<p>One of the biggest ones is fully embracing Reverse Domain Name Notation (RDNN). Because of our long history, new contributors might find that when they, for example, clone elementary/files the binary name of the project is pantheon-files, the .desktop is called org.pantheon.files, and settings are stored at net.launchpad.marlin. When all naming is RDNN based, new contributors can easily predict that the names of binaries, .desktops, GSettings paths, etc will always be, for example, io.elementary.files. This also guarantees that we don’t have file naming conflicts with packages from our upstreams like Debian or Ubuntu. You can read more about that in Cassidy’s previous article, “<a href=\"https://medium.com/elementaryos/cleaning-up-app-codenames-ef9fc637ddef\">Cleaning Up App Codenames</a>”.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/233/1*fORMthbYIEw8Yv6yN9iK8w.gif\"><figcaption>A visual representation of how Gen III feels under the hood</figcaption></figure><p>We’re also pushing to have a consistent source tree directory structure with standard files like Application.vala in the src directory which contains the Application class (imagine that!), an expectation that you can find .desktops and appdata.xml in the data directory, etc. This makes it easier for developers working on multiple projects to quickly find common files across projects.</p>\n<p>Gen III apps also make use of GResources for custom assets like icons, images, and CSS instead of installing files to the filesystem. This is important both for ensuring that these assets don’t cause packaging conflicts if installed to a system directory like the hicolor icon directory and for reducing IO errors and increasing performance.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/764/1*25EUroEzjXy5AOcWLFYQZw.png\"></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/765/1*LBlGHTIiRbJyJixZjf41iA@2x.png\"><figcaption>Left: Lingo a Gen I app | Right: Palaura a Gen III app</figcaption></figure><p>You’ll also notice many Gen III apps making much more comprehensive use of Gtk.CSS to provide branding, including things like more stylized typefaces and colored HeaderBars. You can read more about some of the tools available to developers here in our most recent <a href=\"https://medium.com/elementaryos/developer-tips-branding-your-app-a57cb44d31d3\">Developer Tips</a> article.</p>\n<p><a href=\"https://medium.com/elementaryos/peace-out-about-dialogs-8efa956c0562\">We talked last year</a> about embracing new metadata standards in the form of AppStream and ditching “About” dialogs. We’ll be continuing down this path and are currently investigating new standards like <a href=\"https://hughsie.github.io/oars/\">OARS</a> which would allow new forms of Parental Controls and ensure that users have more control over the kind of content that is consumed on their devices.</p>\n<p>We’ve also made a ton of progress with building all of our apps with Meson and have contributed patches upstream for better Vala support and localization tools. You can read more about that <a href=\"https://medium.com/elementaryos/all-aboard-the-meson-future-hype-train-2b6c478b6b9e\">here</a>.</p>\n<p>Last, but not least, we’ve made much more comprehensive use of automated testing in the form of Travis CI on GitHub and Flightcheck, our testing solution for AppCenter Dashboard. Continuous testing in addition to code review helps us to keep code and metadata quality high and avoid introducing regressions. At the moment, we’re testing a continuous version of Flightcheck to make it easier for anyone to run the full suite of elementary-maintained tests with Travis. More on that soon.</p>\n<p>We also hope to deliver more tools and better documentation throughout the Juno cycle, so stay tuned here to our blog for more info about how you too can deliver killer Open Source apps.</p>\n<p><em>Thanks again to all the developers making apps for AppCenter, everyone who has bought an app on AppCenter, our supporters on </em><a href=\"https://salt.bountysource.com/teams/elementary\"><em>Bountysource</em></a><em> and</em><a href=\"https://www.patreon.com/elementary\"><em> Patreon</em></a><em>, and those who’ve purchased a copy of </em><a href=\"https://elementary.io/\"><em>elementary OS</em></a><em> or merch from </em><a href=\"https://elementary.io/store/\"><em>our store</em></a><em>. Every contribution helps make all of this possible, and we wouldn’t be here without you! If you’d like to help improve elementary OS, don’t hesitate to </em><a href=\"https://elementary.io/get-involved\"><em>Get Involved</em></a><em>!</em></p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=81234cc21a8a\" width=\"1\" height=\"1\"><hr>\n<p><a href=\"https://medium.com/elementaryos/building-the-next-generation-of-apps-81234cc21a8a\">Building The Next Generation of Apps</a> was originally published in <a href=\"https://medium.com/elementaryos\">elementary OS</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>\n",
            "enclosure": {},
            "categories": [
                "development",
                "apps",
                "open-source",
                "elementary-os",
                "design"
            ]
        },
        {
            "title": "Juno Progress for March",
            "pubDate": "2018-03-31 17:27:31",
            "link": "https://medium.com/elementaryos/juno-progress-for-march-6fd2d553c237?source=rss----ef863fa48176---4",
            "guid": "6fd2d553c237",
            "author": "Daniel Foré",
            "thumbnail": "https://cdn-images-1.medium.com/max/810/1*eE-aOnevYP5GOvwRpYANZw@2x.png",
            "description": "\n<h4>You get more features, and you get more features, and you get more features!</h4>\n<p>As we steadily <em>march</em> towards Juno’s release (Ha! See what I did there?) new features are landing in our unstable daily builds on a regular basis. Juno is shaping up to be a great release for developers and other heavy keyboard users with the introduction of a few new tricks:</p>\n<h3>Shortcut Overlay</h3>\n<p>Similar to the popular feature from Ubuntu’s Unity desktop, you’ll now see a keyboard shortcuts cheat sheet when you tap <a href=\"https://medium.com/@cassidyjames/why-the-looped-square-symbol-809a3de71bea\">the ⌘ key</a> in Juno.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/810/1*eE-aOnevYP5GOvwRpYANZw@2x.png\"><figcaption>Tap ⌘ to see a list of system keyboard shortcuts</figcaption></figure><p>The shortcut overlay will automatically close when you use one of these shortcuts or switch to another window, and you can easily get to shortcut settings by clicking the gear icon in the top right of the window.</p>\n<h3>System Settings</h3>\n<p>If you’d prefer to use your ⌘ key for something else, you’ll be able to choose between showing the Shortcut Overlay, the Applications Menu, or doing nothing in the Keyboard Layout settings:</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/973/1*HTI993V-e8N_si2MYMwneA@2x.png\"><figcaption>Choose your ⌘ key behavior in Layout settings</figcaption></figure><p>You might also notice a new setting for Compose key in the screenshot above: Menu! This is the little <a href=\"https://en.wikipedia.org/wiki/Menu_key\">context menu key on some keyboards</a>. In Juno, you’ll be able to choose between it and Caps Lock, Right Alt, Right Ctrl, or Right ⌘ for <a href=\"https://en.wikipedia.org/wiki/Compose_key\">typing special characters</a>.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/973/1*Zfin7WuQbSRYLusrLrpwfg@2x.png\"><figcaption>New mouse pointer acceleration settings, including “None”</figcaption></figure><p>In the Mouse &amp; Touchpad settings, we’ve added a new pointer acceleration setting with hardware default, none, and adaptive options.</p>\n<p>Over in Bluetooth settings, we’ve reworked quite a bit. Discovering new devices now happens directly in this view, without the aid of the old GNOME Bluetooth wizard.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/973/1*cCBuukzGxYC5XTcvldbAvw@2x.png\"><figcaption>Discover nearby Bluetooth devices directly in System Settings</figcaption></figure><p>The layout of this page uses the new Granite <a href=\"https://valadoc.org/granite/Granite.SimpleSettingsPage.html\">SimpleSettingsPage</a> to match with other settings pages, with an obvious switch in the header to quickly toggle Bluetooth and description text reminding you the name that other devices list this device as.</p>\n<h3>Location Services &amp; Privacy Improvements</h3>\n<p>The GeoClue API has been available to developers in elementary OS for quite some time now, but there’ve been a few problems. Developers had to ship a custom VAPI file to use it. There was no documentation on Valadoc. There was no real incentive for developers to use this API over other location APIs. There was no way for elementary OS users to interact with the API to manage their privacy. All that is changing in Juno.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/490/1*7Wx2U9zdugDp8_xrQ03uug@2x.png\"><figcaption>Apps now ask for permission before using location services</figcaption></figure><p>In Juno, when an app tries to request location info through GeoClue, you’ll see a dialog asking for permission and showing the accuracy level that an app is requesting. There’s also a handy link that will take you directly to location settings.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/973/1*LGiVLQbNEQFCdMdvsvcsBw@2x.png\"><figcaption>Location settings can be found in System Settings → Security &amp; Privacy</figcaption></figure><p>At any time, you’ll be able to change which apps have permission to access location services or completely disable location services in System Settings.</p>\n<p>Developers who want to use the Location Services API in their apps can find <a href=\"https://valadoc.org/libgeoclue-2.0/GClue.html\">documentation on Valadoc.org</a> and the GeoClue VAPI will ship with Vala 0.40. <strong>As a heads up to developers</strong>, we’ll be getting more strict about location services in AppCenter submissions: we’ll expect apps to use this location API so our users can feel confident that they have control over when their location is shared with apps.</p>\n<h3>Code</h3>\n<p><a href=\"https://plus.google.com/+FrederikFeichtmeier/posts/evf757Bux1y\">According to a recent poll</a> in the Vala Google+ community, more people are using elementary Code to write Vala apps than Gedit and GNOME Builder combined. We’ve definitely noticed, as the number and quality of contributions has picked up quite a bit.</p>\n<p>The most obvious visual update is a new “quick style switcher” like in Terminal: quicker access to options for text scale, and three built-in color schemes: High Contrast, Solarized Light, and Solarized Dark. Like in Terminal, the color schemes change both the code view and the app UI, meaning you can now switch to a completely dark Code style with just a couple of clicks.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*rVFtkMg5Y0-4tjPqjUecVQ@2x.png\"><figcaption>New quick style options including a new dark mode</figcaption></figure><p>We’ve also added a super handy Toggle Comment shortcut: tap Ctrl+M to toggle commenting out the currently selected line or lines.</p>\n<p>Under the hood, we’ve moved the folder manager plugin into the core of the app to allow for deeper project-focused integration. As a part of this change, the sidebar selection now updates more reliably when you change between different tabs and files. There’s also now a handy “Open In” menu you can use to open files in another app.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*hWu8Lg8XZj8WUUSInsbPdA@2x.png\"><figcaption>Easily open files in external apps from the folder manager</figcaption></figure><p>We’ve also rounded up some fixes for the Pastebin and Strip Trailing Whitespace plugins. You can now cut an entire line by pressing ctrl + x when your cursor is on a line and there is no selection. And one more thing, Code now ships with a plugin to read <a href=\"http://editorconfig.org/\">EditorConfig</a> files.</p>\n<h3>AppCenter</h3>\n<p>We’ve been working on more updates to AppCenter in Juno. The big visual change here is that the “Updates” tab has been renamed to “Installed,” and now shows a little red badge when updates are available. This makes it more clear you can access your currently-installed apps there even when there are no pending updates, and more clearly shows you there’s something to act on when there are updates.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*RkPZ6ptWqwZL_IzvCJwVNQ@2x.png\"></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*zS9cuxUHKkfqxjPcicBTkw@2x.png\"></figure><p>On each app’s listing, we also now show the total download size of the app — including any dependencies — right below the install button. This is great for bandwidth- and storage-conscious users.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/431/1*BkzqqVP_Zk6LqiTO5U_UBQ@2x.png\"><figcaption>An updated payment dialog (with dummy information)</figcaption></figure><p>When paying for an app in Juno, you’ll also notice some small but meaningful quality of life improvements. We now auto-format card numbers (including whitespace and a card type symbol), which should help cut down on typos when entering payment details. We also hide the card number and card verification code (CVC) when the respective entries aren’t focused to help protect from shoulder-surfing.</p>\n<h3>And More</h3>\n<p>Screenshot Tool now appends “@2x” to screenshots taken on a HiDPI display so that other apps and websites (like Medium!) properly scale them automatically.</p>\n<p>In Gala, our window manager, dragging a window to the side or top of a display now shows a quick feedback animation to let you know that the window can be tiled or maximized.</p>\n<p>In the volume indicator, clicking the large speaker or microphone icons in the popover now toggles mute and unmute. Speaking of sound, we have some new sound effects: a cheery little bell sound for new notifications and a somewhat wooden “thunk” sound for feedback about actions that can’t be carried out (such as attempting to alt+ tab window switch with only one window).</p>\n<p>In additional to all of the above, you can always count on a healthy dose of code cleaning and general bug fixing. We’re now up to <a href=\"https://github.com/search?q=org:elementary+is:open+is:issue+milestone:%22juno-beta1%22\">over 450 closed issues</a> associated with the Juno Beta milestone. Some notable improvements include porting several old C classes in Files to shiny new Vala classes, significant simplifications to the code in Network settings, and further progress migrating all of our build systems to <a href=\"https://medium.com/elementaryos/all-aboard-the-meson-future-hype-train-2b6c478b6b9e\">Meson</a>.</p>\n<p>Juno is still under active development and we’re expecting to land even more features, fixes, optimizations, etc. before its big debut. Stay tuned to this blog for more highlights and announcements as we move toward the next major version of elementary OS. If you missed them, be sure to check out our previous posts about Juno:</p>\n<ul>\n<li><a href=\"https://medium.com/elementaryos/juno-progress-for-january-february-9b276042716e\">Juno Progress for January &amp; February</a></li>\n<li><a href=\"https://medium.com/elementaryos/lets-talk-about-elementary-os-5-0-juno-a3a65b97ee7e\">Let’s Talk About elementary OS 5.0 Juno</a></li>\n</ul>\n<p><em>Thank you to everyone who’s bought an app on AppCenter, our supporters on </em><a href=\"https://salt.bountysource.com/teams/elementary\"><em>Bountysource</em></a><em> and</em><a href=\"https://www.patreon.com/elementary\"><em> Patreon</em></a><em>, and those who’ve purchased a copy of </em><a href=\"https://elementary.io/\"><em>elementary OS</em></a><em> or merch from </em><a href=\"https://elementary.io/store/\"><em>our store</em></a><em>. Every contribution helps make all of this possible, and we wouldn’t be here without you! If you’d like to help improve elementary OS, don’t hesitate to </em><a href=\"https://elementary.io/get-involved\"><em>Get Involved</em></a><em>!</em></p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=6fd2d553c237\" width=\"1\" height=\"1\"><hr>\n<p><a href=\"https://medium.com/elementaryos/juno-progress-for-march-6fd2d553c237\">Juno Progress for March</a> was originally published in <a href=\"https://medium.com/elementaryos\">elementary OS</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>\n",
            "content": "\n<h4>You get more features, and you get more features, and you get more features!</h4>\n<p>As we steadily <em>march</em> towards Juno’s release (Ha! See what I did there?) new features are landing in our unstable daily builds on a regular basis. Juno is shaping up to be a great release for developers and other heavy keyboard users with the introduction of a few new tricks:</p>\n<h3>Shortcut Overlay</h3>\n<p>Similar to the popular feature from Ubuntu’s Unity desktop, you’ll now see a keyboard shortcuts cheat sheet when you tap <a href=\"https://medium.com/@cassidyjames/why-the-looped-square-symbol-809a3de71bea\">the ⌘ key</a> in Juno.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/810/1*eE-aOnevYP5GOvwRpYANZw@2x.png\"><figcaption>Tap ⌘ to see a list of system keyboard shortcuts</figcaption></figure><p>The shortcut overlay will automatically close when you use one of these shortcuts or switch to another window, and you can easily get to shortcut settings by clicking the gear icon in the top right of the window.</p>\n<h3>System Settings</h3>\n<p>If you’d prefer to use your ⌘ key for something else, you’ll be able to choose between showing the Shortcut Overlay, the Applications Menu, or doing nothing in the Keyboard Layout settings:</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/973/1*HTI993V-e8N_si2MYMwneA@2x.png\"><figcaption>Choose your ⌘ key behavior in Layout settings</figcaption></figure><p>You might also notice a new setting for Compose key in the screenshot above: Menu! This is the little <a href=\"https://en.wikipedia.org/wiki/Menu_key\">context menu key on some keyboards</a>. In Juno, you’ll be able to choose between it and Caps Lock, Right Alt, Right Ctrl, or Right ⌘ for <a href=\"https://en.wikipedia.org/wiki/Compose_key\">typing special characters</a>.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/973/1*Zfin7WuQbSRYLusrLrpwfg@2x.png\"><figcaption>New mouse pointer acceleration settings, including “None”</figcaption></figure><p>In the Mouse &amp; Touchpad settings, we’ve added a new pointer acceleration setting with hardware default, none, and adaptive options.</p>\n<p>Over in Bluetooth settings, we’ve reworked quite a bit. Discovering new devices now happens directly in this view, without the aid of the old GNOME Bluetooth wizard.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/973/1*cCBuukzGxYC5XTcvldbAvw@2x.png\"><figcaption>Discover nearby Bluetooth devices directly in System Settings</figcaption></figure><p>The layout of this page uses the new Granite <a href=\"https://valadoc.org/granite/Granite.SimpleSettingsPage.html\">SimpleSettingsPage</a> to match with other settings pages, with an obvious switch in the header to quickly toggle Bluetooth and description text reminding you the name that other devices list this device as.</p>\n<h3>Location Services &amp; Privacy Improvements</h3>\n<p>The GeoClue API has been available to developers in elementary OS for quite some time now, but there’ve been a few problems. Developers had to ship a custom VAPI file to use it. There was no documentation on Valadoc. There was no real incentive for developers to use this API over other location APIs. There was no way for elementary OS users to interact with the API to manage their privacy. All that is changing in Juno.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/490/1*7Wx2U9zdugDp8_xrQ03uug@2x.png\"><figcaption>Apps now ask for permission before using location services</figcaption></figure><p>In Juno, when an app tries to request location info through GeoClue, you’ll see a dialog asking for permission and showing the accuracy level that an app is requesting. There’s also a handy link that will take you directly to location settings.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/973/1*LGiVLQbNEQFCdMdvsvcsBw@2x.png\"><figcaption>Location settings can be found in System Settings → Security &amp; Privacy</figcaption></figure><p>At any time, you’ll be able to change which apps have permission to access location services or completely disable location services in System Settings.</p>\n<p>Developers who want to use the Location Services API in their apps can find <a href=\"https://valadoc.org/libgeoclue-2.0/GClue.html\">documentation on Valadoc.org</a> and the GeoClue VAPI will ship with Vala 0.40. <strong>As a heads up to developers</strong>, we’ll be getting more strict about location services in AppCenter submissions: we’ll expect apps to use this location API so our users can feel confident that they have control over when their location is shared with apps.</p>\n<h3>Code</h3>\n<p><a href=\"https://plus.google.com/+FrederikFeichtmeier/posts/evf757Bux1y\">According to a recent poll</a> in the Vala Google+ community, more people are using elementary Code to write Vala apps than Gedit and GNOME Builder combined. We’ve definitely noticed, as the number and quality of contributions has picked up quite a bit.</p>\n<p>The most obvious visual update is a new “quick style switcher” like in Terminal: quicker access to options for text scale, and three built-in color schemes: High Contrast, Solarized Light, and Solarized Dark. Like in Terminal, the color schemes change both the code view and the app UI, meaning you can now switch to a completely dark Code style with just a couple of clicks.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*rVFtkMg5Y0-4tjPqjUecVQ@2x.png\"><figcaption>New quick style options including a new dark mode</figcaption></figure><p>We’ve also added a super handy Toggle Comment shortcut: tap Ctrl+M to toggle commenting out the currently selected line or lines.</p>\n<p>Under the hood, we’ve moved the folder manager plugin into the core of the app to allow for deeper project-focused integration. As a part of this change, the sidebar selection now updates more reliably when you change between different tabs and files. There’s also now a handy “Open In” menu you can use to open files in another app.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*hWu8Lg8XZj8WUUSInsbPdA@2x.png\"><figcaption>Easily open files in external apps from the folder manager</figcaption></figure><p>We’ve also rounded up some fixes for the Pastebin and Strip Trailing Whitespace plugins. You can now cut an entire line by pressing ctrl + x when your cursor is on a line and there is no selection. And one more thing, Code now ships with a plugin to read <a href=\"http://editorconfig.org/\">EditorConfig</a> files.</p>\n<h3>AppCenter</h3>\n<p>We’ve been working on more updates to AppCenter in Juno. The big visual change here is that the “Updates” tab has been renamed to “Installed,” and now shows a little red badge when updates are available. This makes it more clear you can access your currently-installed apps there even when there are no pending updates, and more clearly shows you there’s something to act on when there are updates.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*RkPZ6ptWqwZL_IzvCJwVNQ@2x.png\"></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*zS9cuxUHKkfqxjPcicBTkw@2x.png\"></figure><p>On each app’s listing, we also now show the total download size of the app — including any dependencies — right below the install button. This is great for bandwidth- and storage-conscious users.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/431/1*BkzqqVP_Zk6LqiTO5U_UBQ@2x.png\"><figcaption>An updated payment dialog (with dummy information)</figcaption></figure><p>When paying for an app in Juno, you’ll also notice some small but meaningful quality of life improvements. We now auto-format card numbers (including whitespace and a card type symbol), which should help cut down on typos when entering payment details. We also hide the card number and card verification code (CVC) when the respective entries aren’t focused to help protect from shoulder-surfing.</p>\n<h3>And More</h3>\n<p>Screenshot Tool now appends “@2x” to screenshots taken on a HiDPI display so that other apps and websites (like Medium!) properly scale them automatically.</p>\n<p>In Gala, our window manager, dragging a window to the side or top of a display now shows a quick feedback animation to let you know that the window can be tiled or maximized.</p>\n<p>In the volume indicator, clicking the large speaker or microphone icons in the popover now toggles mute and unmute. Speaking of sound, we have some new sound effects: a cheery little bell sound for new notifications and a somewhat wooden “thunk” sound for feedback about actions that can’t be carried out (such as attempting to alt+ tab window switch with only one window).</p>\n<p>In additional to all of the above, you can always count on a healthy dose of code cleaning and general bug fixing. We’re now up to <a href=\"https://github.com/search?q=org:elementary+is:open+is:issue+milestone:%22juno-beta1%22\">over 450 closed issues</a> associated with the Juno Beta milestone. Some notable improvements include porting several old C classes in Files to shiny new Vala classes, significant simplifications to the code in Network settings, and further progress migrating all of our build systems to <a href=\"https://medium.com/elementaryos/all-aboard-the-meson-future-hype-train-2b6c478b6b9e\">Meson</a>.</p>\n<p>Juno is still under active development and we’re expecting to land even more features, fixes, optimizations, etc. before its big debut. Stay tuned to this blog for more highlights and announcements as we move toward the next major version of elementary OS. If you missed them, be sure to check out our previous posts about Juno:</p>\n<ul>\n<li><a href=\"https://medium.com/elementaryos/juno-progress-for-january-february-9b276042716e\">Juno Progress for January &amp; February</a></li>\n<li><a href=\"https://medium.com/elementaryos/lets-talk-about-elementary-os-5-0-juno-a3a65b97ee7e\">Let’s Talk About elementary OS 5.0 Juno</a></li>\n</ul>\n<p><em>Thank you to everyone who’s bought an app on AppCenter, our supporters on </em><a href=\"https://salt.bountysource.com/teams/elementary\"><em>Bountysource</em></a><em> and</em><a href=\"https://www.patreon.com/elementary\"><em> Patreon</em></a><em>, and those who’ve purchased a copy of </em><a href=\"https://elementary.io/\"><em>elementary OS</em></a><em> or merch from </em><a href=\"https://elementary.io/store/\"><em>our store</em></a><em>. Every contribution helps make all of this possible, and we wouldn’t be here without you! If you’d like to help improve elementary OS, don’t hesitate to </em><a href=\"https://elementary.io/get-involved\"><em>Get Involved</em></a><em>!</em></p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=6fd2d553c237\" width=\"1\" height=\"1\"><hr>\n<p><a href=\"https://medium.com/elementaryos/juno-progress-for-march-6fd2d553c237\">Juno Progress for March</a> was originally published in <a href=\"https://medium.com/elementaryos\">elementary OS</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>\n",
            "enclosure": {},
            "categories": [
                "open-source",
                "preview",
                "development",
                "elementary-os",
                "juno"
            ]
        },
        {
            "title": "AppCenter Spotlight: Color Picker",
            "pubDate": "2018-03-19 18:11:01",
            "link": "https://medium.com/elementaryos/appcenter-spotlight-color-picker-484803720031?source=rss----ef863fa48176---4",
            "guid": "484803720031",
            "author": "Cassidy James Blaede",
            "thumbnail": "https://cdn-images-1.medium.com/max/164/1*4VLXbENQqo_xNe5SgQN6-Q@2x.png",
            "description": "\n<h4>Speed up your workflow</h4>\n<figure><a href=\"https://appcenter.elementary.io/com.github.ronnydo.colorpicker.desktop\"><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/164/1*4VLXbENQqo_xNe5SgQN6-Q@2x.png\"></a><figcaption>On elementary OS? Hit the button to get Color Picker.</figcaption></figure><p>It might look simple, but Color Picker by Ronny Dobra is a well-designed utility that has become a staple for my work. When you launch it, Color Picker instantly opens a magnifying picker. Clicking picks a color and displays the value in the selected format.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/400/1*0MnQzMrBLnPzF4a3THbwXg@2x.png\"></figure><p>Each color that’s picked also gets added to the palette at the bottom, keeping a history of six recent colors for future reference. The dropdown has several formats to choose from, including HEX, RGB, and more specialized formats. Finally, the entry with the color has a handy “copy” button to instantly copy the color in the selected format to the clipboard.</p>\n<p>Color Picker is great for web development, icon design, or just any time you want to grab a specific color. The fact that it always remembers its state—including the last six colors and the selected format—when closing and reopening makes it super quick to open, pick a color, and continue on with your work. There’s no complicated UI to learn or manage, and its small and lightweight nature make it feel like more of a small piece of your workflow than a whole separate app.</p>\n<h3>Get It</h3>\n<p>Color Picker is <a href=\"https://appcenter.elementary.io/com.github.ronnydo.colorpicker.desktop\">available on AppCenter</a> today for the recommended price of just $1. As with all apps on AppCenter, its source code is openly available <a href=\"https://github.com/RonnyDo/ColorPicker\">on GitHub</a>.</p>\n<figure><a href=\"https://appcenter.elementary.io/com.github.ronnydo.colorpicker.desktop\"><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/164/1*4VLXbENQqo_xNe5SgQN6-Q@2x.png\"></a><figcaption>On elementary OS? Hit the button to get Color Picker.</figcaption></figure><p><em>Thanks to everyone who’s bought an app like Color Picker on AppCenter, our supporters on</em><a href=\"https://salt.bountysource.com/teams/elementary\"><em> Bountysource</em></a><em> and</em><a href=\"https://www.patreon.com/elementary\"><em> Patreon</em></a><em>, and those who’ve purchased a copy of </em><a href=\"https://elementary.io/\"><em>elementary OS</em></a><em> or merch from</em><a href=\"https://elementary.io/store/\"><em> our store</em></a><em>. Every contribution helps make all of this possible, and we wouldn’t be here without you. If you’d like to help improve elementary OS, don’t hesitate to </em><a href=\"https://elementary.io/get-involved\"><em>Get Involved</em></a><em>!</em></p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=484803720031\" width=\"1\" height=\"1\"><hr>\n<p><a href=\"https://medium.com/elementaryos/appcenter-spotlight-color-picker-484803720031\">AppCenter Spotlight: Color Picker</a> was originally published in <a href=\"https://medium.com/elementaryos\">elementary OS</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>\n",
            "content": "\n<h4>Speed up your workflow</h4>\n<figure><a href=\"https://appcenter.elementary.io/com.github.ronnydo.colorpicker.desktop\"><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/164/1*4VLXbENQqo_xNe5SgQN6-Q@2x.png\"></a><figcaption>On elementary OS? Hit the button to get Color Picker.</figcaption></figure><p>It might look simple, but Color Picker by Ronny Dobra is a well-designed utility that has become a staple for my work. When you launch it, Color Picker instantly opens a magnifying picker. Clicking picks a color and displays the value in the selected format.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/400/1*0MnQzMrBLnPzF4a3THbwXg@2x.png\"></figure><p>Each color that’s picked also gets added to the palette at the bottom, keeping a history of six recent colors for future reference. The dropdown has several formats to choose from, including HEX, RGB, and more specialized formats. Finally, the entry with the color has a handy “copy” button to instantly copy the color in the selected format to the clipboard.</p>\n<p>Color Picker is great for web development, icon design, or just any time you want to grab a specific color. The fact that it always remembers its state—including the last six colors and the selected format—when closing and reopening makes it super quick to open, pick a color, and continue on with your work. There’s no complicated UI to learn or manage, and its small and lightweight nature make it feel like more of a small piece of your workflow than a whole separate app.</p>\n<h3>Get It</h3>\n<p>Color Picker is <a href=\"https://appcenter.elementary.io/com.github.ronnydo.colorpicker.desktop\">available on AppCenter</a> today for the recommended price of just $1. As with all apps on AppCenter, its source code is openly available <a href=\"https://github.com/RonnyDo/ColorPicker\">on GitHub</a>.</p>\n<figure><a href=\"https://appcenter.elementary.io/com.github.ronnydo.colorpicker.desktop\"><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/164/1*4VLXbENQqo_xNe5SgQN6-Q@2x.png\"></a><figcaption>On elementary OS? Hit the button to get Color Picker.</figcaption></figure><p><em>Thanks to everyone who’s bought an app like Color Picker on AppCenter, our supporters on</em><a href=\"https://salt.bountysource.com/teams/elementary\"><em> Bountysource</em></a><em> and</em><a href=\"https://www.patreon.com/elementary\"><em> Patreon</em></a><em>, and those who’ve purchased a copy of </em><a href=\"https://elementary.io/\"><em>elementary OS</em></a><em> or merch from</em><a href=\"https://elementary.io/store/\"><em> our store</em></a><em>. Every contribution helps make all of this possible, and we wouldn’t be here without you. If you’d like to help improve elementary OS, don’t hesitate to </em><a href=\"https://elementary.io/get-involved\"><em>Get Involved</em></a><em>!</em></p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=484803720031\" width=\"1\" height=\"1\"><hr>\n<p><a href=\"https://medium.com/elementaryos/appcenter-spotlight-color-picker-484803720031\">AppCenter Spotlight: Color Picker</a> was originally published in <a href=\"https://medium.com/elementaryos\">elementary OS</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>\n",
            "enclosure": {},
            "categories": [
                "elementary-os",
                "appcenter-spotlight",
                "utilities",
                "design"
            ]
        },
        {
            "title": "Unroll the Purpleprint",
            "pubDate": "2018-03-14 16:46:01",
            "link": "https://medium.com/elementaryos/unroll-the-purpleprint-768160ca6f27?source=rss----ef863fa48176---4",
            "guid": "768160ca6f27",
            "author": "Cassidy James Blaede",
            "thumbnail": "https://cdn-images-1.medium.com/max/1024/1*3LntsuEwEpnRVkNf5xe46A.png",
            "description": "\n<h4>The story behind the elementary OS Beta wallpaper</h4>\n<p>In our <a href=\"https://medium.com/elementaryos/lets-talk-about-elementary-os-5-0-juno-a3a65b97ee7e\"><em>Let’s Talk About elementary OS 5.0 Juno</em></a> post, we debuted a new vibrant purple wallpaper with a sort of blueprint aesthetic going on. Where did that come from?</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*3LntsuEwEpnRVkNf5xe46A.png\"></figure><p>We’ve actually shipped a pre-release wallpaper for every beta release of elementary OS for a few reasons:</p>\n<ol>\n<li>\n<strong>It makes it more immediately obvious it’s a beta release</strong> in official and developer screenshots. We can pretty freely share screenshots with a big obvious wallpaper and people are more likely to understand it’s a work-in-progress and doesn’t necessarily reflect the end product.</li>\n<li>\n<strong>It helps prevent passing off beta software as release software. </strong>Since we no longer reveal the new default wallpaper until the actual release, it means you don’t get third-party blog posts with weeks- or months-old screenshots with missing features or broken UIs just because they have the “Juno” wallpaper. This is probably helped a little by the fact that we now <em>also </em>provide a press kit with high resolution screenshots using the default wallpaper for each release, and then that after a release, we always use the default wallpaper in official screenshots.</li>\n<li>\n<strong>It gives beta testers a little bit of exclusivity</strong> when running the beta. Of course anyone can go download a wallpaper from GitHub, but beta testers will get it out of the box, by default. When they share screenshots, they’re also sharing that they’re one of the brave ones helping us test and work on the next major version of elementary OS. And once the stable release is out, that wallpaper is gone!</li>\n</ol>\n<h3>History</h3>\n<p>I thought it might be fun to walk back through the history of pre-release wallpapers in elementary OS. We’ve been doing them since the very beginning, but because they’re only ever visible in pre-release builds, we don’t usually talk about or see them that often.</p>\n<p>For Jupiter, we had a yellow-on-white warning. Unfortunately, I can’t find screenshots of it anywhere (this was super janky early days before elementary OS was really an OS!), but it wasn’t pretty.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*ZvMp8D_0XqHfLT7fMsPxUg.png\"><figcaption>The red pre-release wallpaper, from elementary OS 0.2 Luna beta</figcaption></figure><p>For the Luna beta, we switched to a very stark white-on-red-on-white warning box, telling the user this was a pre-release. We decided to ship this to signal:</p>\n<ol>\n<li>This is a pre-release build of the official OS (not just Ubuntu with some PPAs added),</li>\n<li>Stuff might not work right, and</li>\n<li>Where to file bugs.</li>\n</ol>\n<p>It worked, but it was a bit obnoxious, and didn’t work <em>at all</em> for translations (whoops) since it was just an image.</p>\n<p>Then we got a brand makeover by Ian Hex which included logos, type, and color. The old pre-release wallpaper didn’t align to that at all, so we had to update it. We also knew there were problems with having that sort of copy on a wallpaper (especially with our growing community of non-English users). To continue to direct users where to file bugs, we added a translated “Report a problem” item in the dock for beta builds.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*F8zxuf2RtnfuSEVOoWSJZw.png\"><figcaption>An unreleased beta wallpaper</figcaption></figure><p>We had an idea: let’s use a blueprint to represent the being-built nature of a pre-release! Originally, we were going to use a chalky version of “elementary OS beta,” but we decided against too much branding on the wallpaper.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*XJKdLzmrWwpsK8oa0KjfEA.jpeg\"><figcaption>Our first blueprint, from elementary OS 0.3 Freya beta</figcaption></figure><p>We also weren’t super happy with how faded it could look out of the box for beta testers .Instead, we went with a logo-less and more vibrant blue version of the blueprint wallpaper.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*rHscHtdmTQrqYARJGgkxbA.png\"><figcaption>The first purpleprint, from elementary OS 0.4 Loki beta</figcaption></figure><p>We changed it to “purpleprint” for the Loki beta to better align with our developer brand (where we started using purple). It was kind of quirky (a purple blueprint, really?), but it was nice to really start thinking about our color palette and our “developer brand” as we ramped up with AppCenter.</p>\n<p>When we debuted AppCenter and AppCenter Dashboard at <a href=\"https://developer.elementary.io/\">developer.elementary.io</a>, we used the same purple developer color. Even AppCenter’s icon has a purple awning to match!</p>\n<p>In the past several months, <a href=\"https://medium.com/u/4f27c8e412b0\">Daniel Foré</a> has been working on a <a href=\"https://elementary.io/brand#color\">new color palette</a> inspired by our icons, but better aligning to different shades and rules. So when we started talking about Juno, he wanted to be sure our new pre-release imagery aligned with that palette.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*3LntsuEwEpnRVkNf5xe46A.png\"><figcaption>The new purpleprint, starting with elementary OS 5.0 Juno beta</figcaption></figure><p>The new purple (“grape” from the palette) is much more vibrant and playful than the old pale color, and will align with the coming updates to our <a href=\"https://developer.elementary.io/\">Developer</a> site. The new palette also gives us some more interesting shades we can use for related imagery that’s guaranteed to look good and consistent with the other colors.</p>\n<p>You’ll notice we also added a sketched version of our logo, and more explicitly marked it as the Juno beta wallpaper. This helps it stand out more as explicitly “elementary” while keeping the blueprint inspiration (and being less verbose than the full logomark), and helps anyone seeing screenshots know right away which version it’s from.</p>\n<p>It’s fun seeing little behind-the-scenes things like this evolve over time! And most end users will never know about it. ;)</p>\n<p><em>Thank you to everyone who’s bought an app on AppCenter, our supporters on </em><a href=\"https://salt.bountysource.com/teams/elementary\"><em>Bountysource</em></a><em> and</em><a href=\"https://www.patreon.com/elementary\"><em> Patreon</em></a><em>, and those who’ve purchased a copy of </em><a href=\"https://elementary.io/\"><em>elementary OS</em></a><em> or merch from </em><a href=\"https://elementary.io/store/\"><em>our store</em></a><em>. Every contribution helps make all of this possible, and we wouldn’t be here without you! If you’d like to help improve elementary OS, don’t hesitate to </em><a href=\"https://elementary.io/get-involved\"><em>Get Involved</em></a><em>!</em></p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=768160ca6f27\" width=\"1\" height=\"1\"><hr>\n<p><a href=\"https://medium.com/elementaryos/unroll-the-purpleprint-768160ca6f27\">Unroll the Purpleprint</a> was originally published in <a href=\"https://medium.com/elementaryos\">elementary OS</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>\n",
            "content": "\n<h4>The story behind the elementary OS Beta wallpaper</h4>\n<p>In our <a href=\"https://medium.com/elementaryos/lets-talk-about-elementary-os-5-0-juno-a3a65b97ee7e\"><em>Let’s Talk About elementary OS 5.0 Juno</em></a> post, we debuted a new vibrant purple wallpaper with a sort of blueprint aesthetic going on. Where did that come from?</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*3LntsuEwEpnRVkNf5xe46A.png\"></figure><p>We’ve actually shipped a pre-release wallpaper for every beta release of elementary OS for a few reasons:</p>\n<ol>\n<li>\n<strong>It makes it more immediately obvious it’s a beta release</strong> in official and developer screenshots. We can pretty freely share screenshots with a big obvious wallpaper and people are more likely to understand it’s a work-in-progress and doesn’t necessarily reflect the end product.</li>\n<li>\n<strong>It helps prevent passing off beta software as release software. </strong>Since we no longer reveal the new default wallpaper until the actual release, it means you don’t get third-party blog posts with weeks- or months-old screenshots with missing features or broken UIs just because they have the “Juno” wallpaper. This is probably helped a little by the fact that we now <em>also </em>provide a press kit with high resolution screenshots using the default wallpaper for each release, and then that after a release, we always use the default wallpaper in official screenshots.</li>\n<li>\n<strong>It gives beta testers a little bit of exclusivity</strong> when running the beta. Of course anyone can go download a wallpaper from GitHub, but beta testers will get it out of the box, by default. When they share screenshots, they’re also sharing that they’re one of the brave ones helping us test and work on the next major version of elementary OS. And once the stable release is out, that wallpaper is gone!</li>\n</ol>\n<h3>History</h3>\n<p>I thought it might be fun to walk back through the history of pre-release wallpapers in elementary OS. We’ve been doing them since the very beginning, but because they’re only ever visible in pre-release builds, we don’t usually talk about or see them that often.</p>\n<p>For Jupiter, we had a yellow-on-white warning. Unfortunately, I can’t find screenshots of it anywhere (this was super janky early days before elementary OS was really an OS!), but it wasn’t pretty.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*ZvMp8D_0XqHfLT7fMsPxUg.png\"><figcaption>The red pre-release wallpaper, from elementary OS 0.2 Luna beta</figcaption></figure><p>For the Luna beta, we switched to a very stark white-on-red-on-white warning box, telling the user this was a pre-release. We decided to ship this to signal:</p>\n<ol>\n<li>This is a pre-release build of the official OS (not just Ubuntu with some PPAs added),</li>\n<li>Stuff might not work right, and</li>\n<li>Where to file bugs.</li>\n</ol>\n<p>It worked, but it was a bit obnoxious, and didn’t work <em>at all</em> for translations (whoops) since it was just an image.</p>\n<p>Then we got a brand makeover by Ian Hex which included logos, type, and color. The old pre-release wallpaper didn’t align to that at all, so we had to update it. We also knew there were problems with having that sort of copy on a wallpaper (especially with our growing community of non-English users). To continue to direct users where to file bugs, we added a translated “Report a problem” item in the dock for beta builds.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*F8zxuf2RtnfuSEVOoWSJZw.png\"><figcaption>An unreleased beta wallpaper</figcaption></figure><p>We had an idea: let’s use a blueprint to represent the being-built nature of a pre-release! Originally, we were going to use a chalky version of “elementary OS beta,” but we decided against too much branding on the wallpaper.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*XJKdLzmrWwpsK8oa0KjfEA.jpeg\"><figcaption>Our first blueprint, from elementary OS 0.3 Freya beta</figcaption></figure><p>We also weren’t super happy with how faded it could look out of the box for beta testers .Instead, we went with a logo-less and more vibrant blue version of the blueprint wallpaper.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*rHscHtdmTQrqYARJGgkxbA.png\"><figcaption>The first purpleprint, from elementary OS 0.4 Loki beta</figcaption></figure><p>We changed it to “purpleprint” for the Loki beta to better align with our developer brand (where we started using purple). It was kind of quirky (a purple blueprint, really?), but it was nice to really start thinking about our color palette and our “developer brand” as we ramped up with AppCenter.</p>\n<p>When we debuted AppCenter and AppCenter Dashboard at <a href=\"https://developer.elementary.io/\">developer.elementary.io</a>, we used the same purple developer color. Even AppCenter’s icon has a purple awning to match!</p>\n<p>In the past several months, <a href=\"https://medium.com/u/4f27c8e412b0\">Daniel Foré</a> has been working on a <a href=\"https://elementary.io/brand#color\">new color palette</a> inspired by our icons, but better aligning to different shades and rules. So when we started talking about Juno, he wanted to be sure our new pre-release imagery aligned with that palette.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*3LntsuEwEpnRVkNf5xe46A.png\"><figcaption>The new purpleprint, starting with elementary OS 5.0 Juno beta</figcaption></figure><p>The new purple (“grape” from the palette) is much more vibrant and playful than the old pale color, and will align with the coming updates to our <a href=\"https://developer.elementary.io/\">Developer</a> site. The new palette also gives us some more interesting shades we can use for related imagery that’s guaranteed to look good and consistent with the other colors.</p>\n<p>You’ll notice we also added a sketched version of our logo, and more explicitly marked it as the Juno beta wallpaper. This helps it stand out more as explicitly “elementary” while keeping the blueprint inspiration (and being less verbose than the full logomark), and helps anyone seeing screenshots know right away which version it’s from.</p>\n<p>It’s fun seeing little behind-the-scenes things like this evolve over time! And most end users will never know about it. ;)</p>\n<p><em>Thank you to everyone who’s bought an app on AppCenter, our supporters on </em><a href=\"https://salt.bountysource.com/teams/elementary\"><em>Bountysource</em></a><em> and</em><a href=\"https://www.patreon.com/elementary\"><em> Patreon</em></a><em>, and those who’ve purchased a copy of </em><a href=\"https://elementary.io/\"><em>elementary OS</em></a><em> or merch from </em><a href=\"https://elementary.io/store/\"><em>our store</em></a><em>. Every contribution helps make all of this possible, and we wouldn’t be here without you! If you’d like to help improve elementary OS, don’t hesitate to </em><a href=\"https://elementary.io/get-involved\"><em>Get Involved</em></a><em>!</em></p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=768160ca6f27\" width=\"1\" height=\"1\"><hr>\n<p><a href=\"https://medium.com/elementaryos/unroll-the-purpleprint-768160ca6f27\">Unroll the Purpleprint</a> was originally published in <a href=\"https://medium.com/elementaryos\">elementary OS</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>\n",
            "enclosure": {},
            "categories": [
                "elementary-os",
                "behind-the-scenes",
                "juno",
                "beta",
                "prerelease"
            ]
        },
        {
            "title": "Developer Tips: Branding Your App",
            "pubDate": "2018-03-08 17:01:01",
            "link": "https://medium.com/elementaryos/developer-tips-branding-your-app-a57cb44d31d3?source=rss----ef863fa48176---4",
            "guid": "a57cb44d31d3",
            "author": "Cassidy James Blaede",
            "thumbnail": "https://cdn-images-1.medium.com/max/890/1*V1j9nHFHmYloLUmWH36dKQ.png",
            "description": "\n<h4>How to give your app a unique but native look</h4>\n<p>With 75+ native GTK3 apps, AppCenter continues to fill out with quality experiences from several dozen developers. Many have begun to build their own brand around their apps or developer account, which is awesome! Today I’m going to teach you how you can use the elementary stylesheet and other platform conventions to strengthen your own app’s brand and design.</p>\n<h3>Use Style Classes</h3>\n<p>The quickest way to tune your app’s look is to use the built-in style classes from the elementary Stylesheet. There are tons of these for different uses, like back buttons, typography, flat headerbars, etc.</p>\n<p>Constants for <a href=\"https://valadoc.org/granite/Granite.html\">Granite</a> and <a href=\"https://valadoc.org/gtk+-3.0/Gtk.html\">Gtk</a> style classes are available on Valadoc, but here are some of my favorite and most useful ones:</p>\n<ul>\n<li>.back for back buttons, like in System Settings and AppCenter</li>\n<li>.h1–.h4 for heading text labels</li>\n<li>.flat, useful for flat-styled windows or headerbars</li>\n<li>.default-decoration for slim headerbars, like in Terminal</li>\n<li>.rounded for rounded bottom corners on windows, like <a href=\"https://cassidyjames.com/dippi/\">Dippi</a> or <a href=\"https://github.com/danrabbit/harvey\">Harvey</a>\n</li>\n</ul>\n<p>If a style constant exists, it’s always recommended to use it instead of setting a class manually. This ensures you’ll get warnings if the constant is ever deprecated, superseded, or removed. Assuming your app is in Vala (which we recommend for AppCenter, but isn’t required!), you’d add a style constant like:</p>\n<pre>your_widget.<strong>get_style_context</strong> ().<strong>add_class</strong> (Gtk.STYLE_CLASS_FLAT);</pre>\n<p>Or if there’s not a built-in style constant, just set a class with:</p>\n<pre>your_widget.<strong>get_style_context</strong> ().<strong>add_class</strong> (\"rounded\");</pre>\n<p>You can read more at <a href=\"https://valadoc.org/gtk+-3.0/Gtk.StyleContext.add_class.html\">Valadoc</a>, or check them out in action in <a href=\"https://github.com/elementary/granite/blob/56f0725fcb0bc0bbc994ad82a5687d857a940d7e/demo/Views/CSSView.vala\">Granite Demo</a>. Other languages should be similar; look for adding a class to the Gtk style context.</p>\n<p>Style classes work just like you’d expect with CSS: if you ship a custom stylesheet, you can add custom styling for any built-in classes, or even add your own. Combining these with specific colors in your app can go a long way to making it stand out from the crowd while feeling completely native and at home on elementary OS.</p>\n<h3>Set Brand Colors</h3>\n<p>An easy but striking change you can make to your app is using brand colors. The elementary stylesheet uses a number of variables to style the UI, including the headerbar and accent colors throughout your app. By default, headerbars are neutral and the accent color is elementary blue. But you can use this to set the tone for your own brand.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/890/1*V1j9nHFHmYloLUmWH36dKQ.png\"><figcaption>Snaptastic uses a bright orange headerbar.</figcaption></figure><p>To style a headerbar, set the @colorPrimary, @textColorPrimary, and @textColorPrimaryShadow variables in your custom CSS. You can see the variables in the <a href=\"https://github.com/elementary/stylesheet/blob/18ec68f66860c3a51a70e674a9d7308602ec8633/gtk-3.22/gtk.css#L82\">elementary Stylesheet on GitHub</a>.</p>\n<p>For the accent color, just set @colorAccent and it will get picked up by focus outlines, text selection, etc. You can see an example of setting this <a href=\"https://github.com/cassidyjames/dippi/blob/966aedf9f721b939c5f71da1f198973755a72e34/data/Application.css#L2\">in Dippi</a> for a subtle purple accent.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*3lgv2hYCv85QNfS4.\"><figcaption>Notice the subtle purple outline on the Diagonal Size entry</figcaption></figure><p>You can also use CSS to set or change other colors in your UI, like the subtitle in the Snaptastic screenshot from earlier. Don’t get <em>too </em>carried away, but a nice touch of accent color can look great.</p>\n<h3>GResource Icons</h3>\n<p>Sometimes you might want to ship an icon that’s not in the stock elementary set, or you want to recolor an icon to better match your app. Instead of installing these icons to the entire system, it’s best practice to use GResource.</p>\n<p>This entails creating a simple resource XML file, loading the resource as a fallback icon set in your app, and telling your build system to build it with your app. Check out an <a href=\"https://github.com/cassidyjames/dippi/blob/636efcf9c020f663c847838804d4db08be604bb1/data/com.github.cassidyjames.dippi.gresource.xml\">example gresource.xml</a> from Dippi, along with <a href=\"https://github.com/cassidyjames/dippi/blob/636efcf9c020f663c847838804d4db08be604bb1/src/MainWindow.vala#L217\">setting it as the fallback icon theme</a> in Vala. For an example of compiling the resources with a build system, check the <a href=\"https://github.com/cassidyjames/dippi/blob/5258847464975dbf29f4292d13ce98c7d07246a5/meson.build#L8\">meson.build</a> file.</p>\n<p>Different languages and build systems will obviously differ, but documentation and/or examples shouldn’t be too hard to come by. The <a href=\"https://developer.gnome.org/gio/stable/GResource.html\">GNOME developer docs</a> are a good place to start.</p>\n<h3>Typography</h3>\n<p>Using the aforementioned .h1–.h4 Gtk style classes for headings is one of the fastest ways to add some rich typography to your app and is a great place to start. These classes ensure you’re not hardcoding an exact style, but are marking the importance of a heading and letting the system stylesheet take over with setting the exact typeface, size, and weight.</p>\n<p>You can also directly set a font weight and color in your UI with CSS, as you’d expect. For color, keep in mind WCAG contrast guidelines (you can use <a href=\"https://appcenter.elementary.io/com.github.danrabbit.harvey.desktop\">Harvey on AppCenter</a> to check!).</p>\n<p>You can also set a font size in CSS, but <strong>don’t use </strong><strong>px units</strong>: users might set a larger or smaller text size than default for accessibility reasons. It’s always a good idea to test with accessibility settings, and using pt or em units ensures your font will scale to match the user’s settings. Head to <em>System Settings</em> → <em>Universal Access</em> → <em>Display</em> to try out different text sizes.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/765/1*LBlGHTIiRbJyJixZjf41iA@2x.png\"><figcaption>Dictionary app <a href=\"https://appcenter.elementary.io/com.github.lainsce.palaura.desktop\">Palaura</a> uses a Serif font to display definitions</figcaption></figure><p>One less-explored area of unique branding is using a custom font in your app’s “chrome” or UI. Snaptastic again uses this, but there are some things to keep in mind:</p>\n<ol>\n<li>\n<strong>Use a pre-installed font, or depend on a font</strong> if it’s in the OS repos. You need to make sure the font will show up on users’ systems, not just when it’s installed on yours! Check Snaptastic’s source code for <a href=\"https://github.com/bartzaalberg/snaptastic/blob/b3b52ad16684654c8eea06f490229a42cb5fc2db/debian/control#L15\">an example of depending on a font</a>.</li>\n<li>\n<strong>Consider localization</strong>. Not every font supports every language and special characters, so your app might look weird when translated. Pick a font with wide character coverage, and try your app out with a few different languages to see how it’s going to look.</li>\n<li>\n<strong>Avoid custom fonts for content</strong>. The screenshot tool in elementary OS has a “conceal text” feature that temporarily replaces the system font with a scribbly “redacted” font. This won’t work anywhere you set a custom font, so be careful when dealing with user content and any potentially sensitive information.</li>\n</ol>\n<p>Using these tips, you can help your app stand out by bolstering its brand and design. Remember, design isn’t always about adding to your app, though! Use these methods with reservation and purpose. Not every app needs to be super custom branded, and small touches go a long way.</p>\n<p><em>Thanks again to all the developers making apps for AppCenter, everyone who has bought an app on AppCenter, our supporters on </em><a href=\"https://salt.bountysource.com/teams/elementary\"><em>Bountysource</em></a><em> and</em><a href=\"https://www.patreon.com/elementary\"><em> Patreon</em></a><em>, and those who’ve purchased a copy of </em><a href=\"https://elementary.io/\"><em>elementary OS</em></a><em> or merch from </em><a href=\"https://elementary.io/store/\"><em>our store</em></a><em>. Every contribution helps make all of this possible, and we wouldn’t be here without you! If you’d like to help improve elementary OS, don’t hesitate to </em><a href=\"https://elementary.io/get-involved\"><em>Get Involved</em></a><em>!</em></p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=a57cb44d31d3\" width=\"1\" height=\"1\"><hr>\n<p><a href=\"https://medium.com/elementaryos/developer-tips-branding-your-app-a57cb44d31d3\">Developer Tips: Branding Your App</a> was originally published in <a href=\"https://medium.com/elementaryos\">elementary OS</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>\n",
            "content": "\n<h4>How to give your app a unique but native look</h4>\n<p>With 75+ native GTK3 apps, AppCenter continues to fill out with quality experiences from several dozen developers. Many have begun to build their own brand around their apps or developer account, which is awesome! Today I’m going to teach you how you can use the elementary stylesheet and other platform conventions to strengthen your own app’s brand and design.</p>\n<h3>Use Style Classes</h3>\n<p>The quickest way to tune your app’s look is to use the built-in style classes from the elementary Stylesheet. There are tons of these for different uses, like back buttons, typography, flat headerbars, etc.</p>\n<p>Constants for <a href=\"https://valadoc.org/granite/Granite.html\">Granite</a> and <a href=\"https://valadoc.org/gtk+-3.0/Gtk.html\">Gtk</a> style classes are available on Valadoc, but here are some of my favorite and most useful ones:</p>\n<ul>\n<li>.back for back buttons, like in System Settings and AppCenter</li>\n<li>.h1–.h4 for heading text labels</li>\n<li>.flat, useful for flat-styled windows or headerbars</li>\n<li>.default-decoration for slim headerbars, like in Terminal</li>\n<li>.rounded for rounded bottom corners on windows, like <a href=\"https://cassidyjames.com/dippi/\">Dippi</a> or <a href=\"https://github.com/danrabbit/harvey\">Harvey</a>\n</li>\n</ul>\n<p>If a style constant exists, it’s always recommended to use it instead of setting a class manually. This ensures you’ll get warnings if the constant is ever deprecated, superseded, or removed. Assuming your app is in Vala (which we recommend for AppCenter, but isn’t required!), you’d add a style constant like:</p>\n<pre>your_widget.<strong>get_style_context</strong> ().<strong>add_class</strong> (Gtk.STYLE_CLASS_FLAT);</pre>\n<p>Or if there’s not a built-in style constant, just set a class with:</p>\n<pre>your_widget.<strong>get_style_context</strong> ().<strong>add_class</strong> (\"rounded\");</pre>\n<p>You can read more at <a href=\"https://valadoc.org/gtk+-3.0/Gtk.StyleContext.add_class.html\">Valadoc</a>, or check them out in action in <a href=\"https://github.com/elementary/granite/blob/56f0725fcb0bc0bbc994ad82a5687d857a940d7e/demo/Views/CSSView.vala\">Granite Demo</a>. Other languages should be similar; look for adding a class to the Gtk style context.</p>\n<p>Style classes work just like you’d expect with CSS: if you ship a custom stylesheet, you can add custom styling for any built-in classes, or even add your own. Combining these with specific colors in your app can go a long way to making it stand out from the crowd while feeling completely native and at home on elementary OS.</p>\n<h3>Set Brand Colors</h3>\n<p>An easy but striking change you can make to your app is using brand colors. The elementary stylesheet uses a number of variables to style the UI, including the headerbar and accent colors throughout your app. By default, headerbars are neutral and the accent color is elementary blue. But you can use this to set the tone for your own brand.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/890/1*V1j9nHFHmYloLUmWH36dKQ.png\"><figcaption>Snaptastic uses a bright orange headerbar.</figcaption></figure><p>To style a headerbar, set the @colorPrimary, @textColorPrimary, and @textColorPrimaryShadow variables in your custom CSS. You can see the variables in the <a href=\"https://github.com/elementary/stylesheet/blob/18ec68f66860c3a51a70e674a9d7308602ec8633/gtk-3.22/gtk.css#L82\">elementary Stylesheet on GitHub</a>.</p>\n<p>For the accent color, just set @colorAccent and it will get picked up by focus outlines, text selection, etc. You can see an example of setting this <a href=\"https://github.com/cassidyjames/dippi/blob/966aedf9f721b939c5f71da1f198973755a72e34/data/Application.css#L2\">in Dippi</a> for a subtle purple accent.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*3lgv2hYCv85QNfS4.\"><figcaption>Notice the subtle purple outline on the Diagonal Size entry</figcaption></figure><p>You can also use CSS to set or change other colors in your UI, like the subtitle in the Snaptastic screenshot from earlier. Don’t get <em>too </em>carried away, but a nice touch of accent color can look great.</p>\n<h3>GResource Icons</h3>\n<p>Sometimes you might want to ship an icon that’s not in the stock elementary set, or you want to recolor an icon to better match your app. Instead of installing these icons to the entire system, it’s best practice to use GResource.</p>\n<p>This entails creating a simple resource XML file, loading the resource as a fallback icon set in your app, and telling your build system to build it with your app. Check out an <a href=\"https://github.com/cassidyjames/dippi/blob/636efcf9c020f663c847838804d4db08be604bb1/data/com.github.cassidyjames.dippi.gresource.xml\">example gresource.xml</a> from Dippi, along with <a href=\"https://github.com/cassidyjames/dippi/blob/636efcf9c020f663c847838804d4db08be604bb1/src/MainWindow.vala#L217\">setting it as the fallback icon theme</a> in Vala. For an example of compiling the resources with a build system, check the <a href=\"https://github.com/cassidyjames/dippi/blob/5258847464975dbf29f4292d13ce98c7d07246a5/meson.build#L8\">meson.build</a> file.</p>\n<p>Different languages and build systems will obviously differ, but documentation and/or examples shouldn’t be too hard to come by. The <a href=\"https://developer.gnome.org/gio/stable/GResource.html\">GNOME developer docs</a> are a good place to start.</p>\n<h3>Typography</h3>\n<p>Using the aforementioned .h1–.h4 Gtk style classes for headings is one of the fastest ways to add some rich typography to your app and is a great place to start. These classes ensure you’re not hardcoding an exact style, but are marking the importance of a heading and letting the system stylesheet take over with setting the exact typeface, size, and weight.</p>\n<p>You can also directly set a font weight and color in your UI with CSS, as you’d expect. For color, keep in mind WCAG contrast guidelines (you can use <a href=\"https://appcenter.elementary.io/com.github.danrabbit.harvey.desktop\">Harvey on AppCenter</a> to check!).</p>\n<p>You can also set a font size in CSS, but <strong>don’t use </strong><strong>px units</strong>: users might set a larger or smaller text size than default for accessibility reasons. It’s always a good idea to test with accessibility settings, and using pt or em units ensures your font will scale to match the user’s settings. Head to <em>System Settings</em> → <em>Universal Access</em> → <em>Display</em> to try out different text sizes.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/765/1*LBlGHTIiRbJyJixZjf41iA@2x.png\"><figcaption>Dictionary app <a href=\"https://appcenter.elementary.io/com.github.lainsce.palaura.desktop\">Palaura</a> uses a Serif font to display definitions</figcaption></figure><p>One less-explored area of unique branding is using a custom font in your app’s “chrome” or UI. Snaptastic again uses this, but there are some things to keep in mind:</p>\n<ol>\n<li>\n<strong>Use a pre-installed font, or depend on a font</strong> if it’s in the OS repos. You need to make sure the font will show up on users’ systems, not just when it’s installed on yours! Check Snaptastic’s source code for <a href=\"https://github.com/bartzaalberg/snaptastic/blob/b3b52ad16684654c8eea06f490229a42cb5fc2db/debian/control#L15\">an example of depending on a font</a>.</li>\n<li>\n<strong>Consider localization</strong>. Not every font supports every language and special characters, so your app might look weird when translated. Pick a font with wide character coverage, and try your app out with a few different languages to see how it’s going to look.</li>\n<li>\n<strong>Avoid custom fonts for content</strong>. The screenshot tool in elementary OS has a “conceal text” feature that temporarily replaces the system font with a scribbly “redacted” font. This won’t work anywhere you set a custom font, so be careful when dealing with user content and any potentially sensitive information.</li>\n</ol>\n<p>Using these tips, you can help your app stand out by bolstering its brand and design. Remember, design isn’t always about adding to your app, though! Use these methods with reservation and purpose. Not every app needs to be super custom branded, and small touches go a long way.</p>\n<p><em>Thanks again to all the developers making apps for AppCenter, everyone who has bought an app on AppCenter, our supporters on </em><a href=\"https://salt.bountysource.com/teams/elementary\"><em>Bountysource</em></a><em> and</em><a href=\"https://www.patreon.com/elementary\"><em> Patreon</em></a><em>, and those who’ve purchased a copy of </em><a href=\"https://elementary.io/\"><em>elementary OS</em></a><em> or merch from </em><a href=\"https://elementary.io/store/\"><em>our store</em></a><em>. Every contribution helps make all of this possible, and we wouldn’t be here without you! If you’d like to help improve elementary OS, don’t hesitate to </em><a href=\"https://elementary.io/get-involved\"><em>Get Involved</em></a><em>!</em></p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=a57cb44d31d3\" width=\"1\" height=\"1\"><hr>\n<p><a href=\"https://medium.com/elementaryos/developer-tips-branding-your-app-a57cb44d31d3\">Developer Tips: Branding Your App</a> was originally published in <a href=\"https://medium.com/elementaryos\">elementary OS</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>\n",
            "enclosure": {},
            "categories": [
                "branding",
                "tips",
                "design",
                "elementary-os",
                "how-to"
            ]
        }
    ]
}